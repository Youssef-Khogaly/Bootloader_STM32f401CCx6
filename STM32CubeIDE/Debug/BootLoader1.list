
BootLoader1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003170  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003304  08003304  00013304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800331c  0800331c  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  0800331c  0800331c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003324  08003324  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003324  08003324  00013324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003328  08003328  00013328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  0800332c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000034  08003360  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08003360  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000096fe  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f3a  00000000  00000000  000297a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  0002b6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b0  00000000  00000000  0002bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001619a  00000000  00000000  0002c678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c015  00000000  00000000  00042812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085ecb  00000000  00000000  0004e827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002250  00000000  00000000  000d46f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d6944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000034 	.word	0x20000034
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080032ec 	.word	0x080032ec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000038 	.word	0x20000038
 80001d0:	080032ec 	.word	0x080032ec

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <BL_UART_Featch_Host_Command>:
static uint8_t BL_Commands[8U] = {CBL_GET_VER_CMD,CBL_GET_HELP_CMD,CBL_GET_CID_CMD,CBL_GET_RDP_STATUS_CMD,CBL_GO_TO_ADDR_CMD,CBL_FLASH_ERASE_CMD,CBL_MEM_WRITE_CMD,CBL_CHANGE_ROP_Level_CMD};
/* ----------------------- Software Interfaces Start ---------- */


BL_Stat_t BL_UART_Featch_Host_Command(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
	BL_Stat_t RetStat = BL_ACK;
 80004d6:	2300      	movs	r3, #0
 80004d8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef UART_Stat = HAL_OK;
 80004da:	2300      	movs	r3, #0
 80004dc:	71bb      	strb	r3, [r7, #6]
	uint16_t DataLen = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	80bb      	strh	r3, [r7, #4]
	/* Clear Rx Buffer */
	memset(BL_HOST_BUFFER,(uint8_t)0U , BL_HOST_BUFFER_RX_MAX_SIZE);
 80004e2:	f44f 7288 	mov.w	r2, #272	; 0x110
 80004e6:	2100      	movs	r1, #0
 80004e8:	481c      	ldr	r0, [pc, #112]	; (800055c <BL_UART_Featch_Host_Command+0x8c>)
 80004ea:	f002 fed3 	bl	8003294 <memset>
	 * Max data len = 5 + N : 1 byte command + N byte details + 4 byte CRC
	 * */
#ifdef  BL_ENABLE_DEBUG
	BL_PrintMsg("Send length of Data %s" , BL_PRINT_NEWLINE);
#endif
	UART_Stat |= HAL_UART_Receive(BL_DEBUG_UART, BL_HOST_BUFFER, (uint16_t)1U, HAL_MAX_DELAY);
 80004ee:	f04f 33ff 	mov.w	r3, #4294967295
 80004f2:	2201      	movs	r2, #1
 80004f4:	4919      	ldr	r1, [pc, #100]	; (800055c <BL_UART_Featch_Host_Command+0x8c>)
 80004f6:	481a      	ldr	r0, [pc, #104]	; (8000560 <BL_UART_Featch_Host_Command+0x90>)
 80004f8:	f002 fb05 	bl	8002b06 <HAL_UART_Receive>
 80004fc:	4603      	mov	r3, r0
 80004fe:	461a      	mov	r2, r3
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	4313      	orrs	r3, r2
 8000504:	71bb      	strb	r3, [r7, #6]
	DataLen = BL_HOST_BUFFER[0];
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <BL_UART_Featch_Host_Command+0x8c>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	80bb      	strh	r3, [r7, #4]

#ifdef  BL_ENABLE_DEBUG
	BL_PrintMsg("data len = : %i , Send command %s" ,BL_HOST_BUFFER[0] ,BL_PRINT_NEWLINE);
#endif
	UART_Stat |= HAL_UART_Receive(BL_DEBUG_UART, BL_HOST_BUFFER+1UL , DataLen, HAL_MAX_DELAY);
 800050c:	4915      	ldr	r1, [pc, #84]	; (8000564 <BL_UART_Featch_Host_Command+0x94>)
 800050e:	88ba      	ldrh	r2, [r7, #4]
 8000510:	f04f 33ff 	mov.w	r3, #4294967295
 8000514:	4812      	ldr	r0, [pc, #72]	; (8000560 <BL_UART_Featch_Host_Command+0x90>)
 8000516:	f002 faf6 	bl	8002b06 <HAL_UART_Receive>
 800051a:	4603      	mov	r3, r0
 800051c:	461a      	mov	r2, r3
 800051e:	79bb      	ldrb	r3, [r7, #6]
 8000520:	4313      	orrs	r3, r2
 8000522:	71bb      	strb	r3, [r7, #6]
	if(UART_Stat == HAL_OK)
 8000524:	79bb      	ldrb	r3, [r7, #6]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d113      	bne.n	8000552 <BL_UART_Featch_Host_Command+0x82>
	{
		if(IS_BL_COMMAND(BL_HOST_BUFFER[1U]))
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <BL_UART_Featch_Host_Command+0x8c>)
 800052c:	785b      	ldrb	r3, [r3, #1]
 800052e:	2b0f      	cmp	r3, #15
 8000530:	d90d      	bls.n	800054e <BL_UART_Featch_Host_Command+0x7e>
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <BL_UART_Featch_Host_Command+0x8c>)
 8000534:	785b      	ldrb	r3, [r3, #1]
 8000536:	2b17      	cmp	r3, #23
 8000538:	d809      	bhi.n	800054e <BL_UART_Featch_Host_Command+0x7e>
		{
			BL_HelperFunc[BL_COMMAND_TO_ARR_IDX(BL_HOST_BUFFER[1U])]();
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <BL_UART_Featch_Host_Command+0x8c>)
 800053c:	785b      	ldrb	r3, [r3, #1]
 800053e:	3b10      	subs	r3, #16
 8000540:	b2db      	uxtb	r3, r3
 8000542:	461a      	mov	r2, r3
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <BL_UART_Featch_Host_Command+0x98>)
 8000546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800054a:	4798      	blx	r3
 800054c:	e001      	b.n	8000552 <BL_UART_Featch_Host_Command+0x82>
		}
		else
		{
			RetStat = BL_NACK;
 800054e:	2301      	movs	r3, #1
 8000550:	71fb      	strb	r3, [r7, #7]
		}
	}
#ifdef  BL_ENABLE_DEBUG
	BL_PrintMsg("BL_UART_Featch_Host_Command: return status -> %i %s" ,RetStat,BL_PRINT_NEWLINE);
#endif
	return RetStat;
 8000552:	79fb      	ldrb	r3, [r7, #7]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000050 	.word	0x20000050
 8000560:	200001b0 	.word	0x200001b0
 8000564:	20000051 	.word	0x20000051
 8000568:	20000000 	.word	0x20000000

0800056c <Bootloader_CRC_Verifiy>:
	return BlStatRet;
}


static uint8_t Bootloader_CRC_Verifiy(uint32_t dataLen ,uint32_t HostCRC)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	uint8_t crcStat = CRC_VERIFICATION_FAILED;
 8000576:	2300      	movs	r3, #0
 8000578:	75fb      	strb	r3, [r7, #23]
	uint32_t MCU_CRC_Calculated = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
	uint8_t DataCounter = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	73fb      	strb	r3, [r7, #15]
	uint32_t DataBuffer = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
	/*Calculate my CRC*/
	for( ; DataCounter < dataLen ; ++DataCounter)
 8000586:	e00e      	b.n	80005a6 <Bootloader_CRC_Verifiy+0x3a>
	{
		DataBuffer = (uint32_t)BL_HOST_BUFFER[DataCounter];
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <Bootloader_CRC_Verifiy+0x68>)
 800058c:	5cd3      	ldrb	r3, [r2, r3]
 800058e:	60bb      	str	r3, [r7, #8]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(BL_CRC_ENGINE_OBJ , &DataBuffer , (uint32_t)1);
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2201      	movs	r2, #1
 8000596:	4619      	mov	r1, r3
 8000598:	480f      	ldr	r0, [pc, #60]	; (80005d8 <Bootloader_CRC_Verifiy+0x6c>)
 800059a:	f000 ff22 	bl	80013e2 <HAL_CRC_Accumulate>
 800059e:	6138      	str	r0, [r7, #16]
	for( ; DataCounter < dataLen ; ++DataCounter)
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	3301      	adds	r3, #1
 80005a4:	73fb      	strb	r3, [r7, #15]
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d8ec      	bhi.n	8000588 <Bootloader_CRC_Verifiy+0x1c>
	}

	/*Reset CRC data REG*/

	__HAL_CRC_DR_RESET(BL_CRC_ENGINE_OBJ);
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <Bootloader_CRC_Verifiy+0x6c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	689a      	ldr	r2, [r3, #8]
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <Bootloader_CRC_Verifiy+0x6c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f042 0201 	orr.w	r2, r2, #1
 80005bc:	609a      	str	r2, [r3, #8]
	if(HostCRC == MCU_CRC_Calculated)
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	693b      	ldr	r3, [r7, #16]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d101      	bne.n	80005ca <Bootloader_CRC_Verifiy+0x5e>
	{
		crcStat = CRC_VERIFICATION_PASSED;
 80005c6:	2301      	movs	r3, #1
 80005c8:	75fb      	strb	r3, [r7, #23]
	}
	else {}

	return crcStat;
 80005ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000050 	.word	0x20000050
 80005d8:	20000160 	.word	0x20000160

080005dc <Bootloader_SendAck>:


static void Bootloader_SendAck(uint8_t ReplyMessageLength)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Ack_Value[CBL_ACK_REPLY_MSG_LENGTH] = {CBL_SEND_ACK , ReplyMessageLength};
 80005e6:	23cd      	movs	r3, #205	; 0xcd
 80005e8:	733b      	strb	r3, [r7, #12]
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	737b      	strb	r3, [r7, #13]
	BootLoader_SendData(Ack_Value , CBL_ACK_REPLY_MSG_LENGTH);
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2102      	movs	r1, #2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fb31 	bl	8000c5c <BootLoader_SendData>
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <Bootloader_SendNAck>:


static void Bootloader_SendNAck(void)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
	uint8_t Ack_Value[CBL_ACK_REPLY_MSG_LENGTH] = {CBL_SEND_NACK, } ;
 8000608:	23ab      	movs	r3, #171	; 0xab
 800060a:	80bb      	strh	r3, [r7, #4]
	BootLoader_SendData(Ack_Value , CBL_ACK_REPLY_MSG_LENGTH);
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fb23 	bl	8000c5c <BootLoader_SendData>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <Bootloader_Get_Version>:


static void Bootloader_Get_Version(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
	uint8_t BL_Version[4U] = {CBL_VENDOR_ID , CBL_SW_MAJOR_VERSION , CBL_SW_MINOR_PATCH ,CBL_SW_PATCH_VERSION};
 8000626:	f44f 73b2 	mov.w	r3, #356	; 0x164
 800062a:	607b      	str	r3, [r7, #4]
	uint16_t Host_PacketLen = BL_HOST_BUFFER[0U] + 1U;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <Bootloader_Get_Version+0x58>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b29b      	uxth	r3, r3
 8000632:	3301      	adds	r3, #1
 8000634:	81fb      	strh	r3, [r7, #14]
	uint32_t Host_CRC32 = 0UL;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]

	/*extract CRC from buffer */
	Host_CRC32 = *((uint32_t*)(BL_HOST_BUFFER + (Host_PacketLen - CRC_TYPE_SIZE)));
 800063a:	89fb      	ldrh	r3, [r7, #14]
 800063c:	3b04      	subs	r3, #4
 800063e:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <Bootloader_Get_Version+0x58>)
 8000640:	4413      	add	r3, r2
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	60bb      	str	r3, [r7, #8]
	/*Calcualte my crc and verification of crc */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verifiy((uint32_t)(Host_PacketLen-CRC_TYPE_SIZE) , Host_CRC32) )
 8000646:	89fb      	ldrh	r3, [r7, #14]
 8000648:	3b04      	subs	r3, #4
 800064a:	68b9      	ldr	r1, [r7, #8]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ff8d 	bl	800056c <Bootloader_CRC_Verifiy>
 8000652:	4603      	mov	r3, r0
 8000654:	2b01      	cmp	r3, #1
 8000656:	d108      	bne.n	800066a <Bootloader_Get_Version+0x4a>
	{
#ifdef  BL_ENABLE_DEBUG
			BL_PrintMsg("CRC Verification Passed %s" , BL_PRINT_NEWLINE);
#endif
		/*Send Ack +  Reply message length*/
		Bootloader_SendAck((uint8_t)4);
 8000658:	2004      	movs	r0, #4
 800065a:	f7ff ffbf 	bl	80005dc <Bootloader_SendAck>
		/*Send message with version info*/
		BootLoader_SendData(BL_Version , 4U);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2104      	movs	r1, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fafa 	bl	8000c5c <BootLoader_SendData>
#endif
		/*Send NACK */
		Bootloader_SendNAck();
	}

}
 8000668:	e001      	b.n	800066e <Bootloader_Get_Version+0x4e>
		Bootloader_SendNAck();
 800066a:	f7ff ffca 	bl	8000602 <Bootloader_SendNAck>
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000050 	.word	0x20000050

0800067c <Bootloader_Get_Help>:
static void Bootloader_Get_Help(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
	uint16_t Host_PacketLen = BL_HOST_BUFFER[0U] + 1U;
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <Bootloader_Get_Help+0x50>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	b29b      	uxth	r3, r3
 8000688:	3301      	adds	r3, #1
 800068a:	80fb      	strh	r3, [r7, #6]
	uint32_t Host_CRC32 = 0UL;
 800068c:	2300      	movs	r3, #0
 800068e:	603b      	str	r3, [r7, #0]

	/*extract CRC from buffer */
	Host_CRC32 = *((uint32_t*)(BL_HOST_BUFFER + (Host_PacketLen - CRC_TYPE_SIZE)));
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	3b04      	subs	r3, #4
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <Bootloader_Get_Help+0x50>)
 8000696:	4413      	add	r3, r2
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	603b      	str	r3, [r7, #0]

	/*Calcualte my crc and verify  crc */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verifiy((uint32_t)(Host_PacketLen-CRC_TYPE_SIZE) , Host_CRC32) )
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	3b04      	subs	r3, #4
 80006a0:	6839      	ldr	r1, [r7, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff62 	bl	800056c <Bootloader_CRC_Verifiy>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d107      	bne.n	80006be <Bootloader_Get_Help+0x42>
	{
#ifdef  BL_ENABLE_DEBUG
			BL_PrintMsg("CRC Verification Passed %s" , BL_PRINT_NEWLINE);
#endif
		/*Send Ack +  Reply message length*/
		Bootloader_SendAck((uint8_t)BL_NUMBER_OF_COMMAND);
 80006ae:	2008      	movs	r0, #8
 80006b0:	f7ff ff94 	bl	80005dc <Bootloader_SendAck>
		/*Send BL commands*/
		BootLoader_SendData(BL_Commands , BL_NUMBER_OF_COMMAND);
 80006b4:	2108      	movs	r1, #8
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <Bootloader_Get_Help+0x54>)
 80006b8:	f000 fad0 	bl	8000c5c <BootLoader_SendData>
			BL_PrintMsg("CRC Verification Failed %s" , BL_PRINT_NEWLINE);
#endif
		/*Send NACK */
		Bootloader_SendNAck();
	}
}
 80006bc:	e001      	b.n	80006c2 <Bootloader_Get_Help+0x46>
		Bootloader_SendNAck();
 80006be:	f7ff ffa0 	bl	8000602 <Bootloader_SendNAck>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000050 	.word	0x20000050
 80006d0:	20000020 	.word	0x20000020

080006d4 <Bootloader_Get_Chip_ID>:
static void Bootloader_Get_Chip_ID(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
	uint16_t Host_PacketLen = BL_HOST_BUFFER[0U] + 1U;
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <Bootloader_Get_Chip_ID+0x64>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	3301      	adds	r3, #1
 80006e2:	81fb      	strh	r3, [r7, #14]
	uint32_t Host_CRC32 = 0UL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
	uint16_t MCU_ID = 0 ;
 80006e8:	2300      	movs	r3, #0
 80006ea:	80fb      	strh	r3, [r7, #6]
	/*extract CRC from buffer */
	Host_CRC32 = *((uint32_t*)(BL_HOST_BUFFER + (Host_PacketLen - CRC_TYPE_SIZE)));
 80006ec:	89fb      	ldrh	r3, [r7, #14]
 80006ee:	3b04      	subs	r3, #4
 80006f0:	4a11      	ldr	r2, [pc, #68]	; (8000738 <Bootloader_Get_Chip_ID+0x64>)
 80006f2:	4413      	add	r3, r2
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	60bb      	str	r3, [r7, #8]

	/*Calcualte my crc and verify  crc */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verifiy((uint32_t)(Host_PacketLen-CRC_TYPE_SIZE) , Host_CRC32) )
 80006f8:	89fb      	ldrh	r3, [r7, #14]
 80006fa:	3b04      	subs	r3, #4
 80006fc:	68b9      	ldr	r1, [r7, #8]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff34 	bl	800056c <Bootloader_CRC_Verifiy>
 8000704:	4603      	mov	r3, r0
 8000706:	2b01      	cmp	r3, #1
 8000708:	d10f      	bne.n	800072a <Bootloader_Get_Chip_ID+0x56>
	{
#ifdef  BL_ENABLE_DEBUG
			BL_PrintMsg("CRC Verification Passed %s" , BL_PRINT_NEWLINE);
#endif
		/* Get MCU ID */
		MCU_ID = (uint16_t)((DBGMCU->IDCODE) & ((uint32_t)0x0007FFUL));
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <Bootloader_Get_Chip_ID+0x68>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	b29b      	uxth	r3, r3
 8000710:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000714:	b29b      	uxth	r3, r3
 8000716:	80fb      	strh	r3, [r7, #6]
		/*Send Ack +  Reply message length*/
		Bootloader_SendAck((uint8_t)2U);
 8000718:	2002      	movs	r0, #2
 800071a:	f7ff ff5f 	bl	80005dc <Bootloader_SendAck>
		/*Send MCU ID*/
		BootLoader_SendData( (uint8_t*)(&MCU_ID), (uint32_t)2UL);
 800071e:	1dbb      	adds	r3, r7, #6
 8000720:	2102      	movs	r1, #2
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fa9a 	bl	8000c5c <BootLoader_SendData>
			BL_PrintMsg("CRC Verification Failed %s" , BL_PRINT_NEWLINE);
#endif
		/*Send NACK */
		Bootloader_SendNAck();
	}
}
 8000728:	e001      	b.n	800072e <Bootloader_Get_Chip_ID+0x5a>
		Bootloader_SendNAck();
 800072a:	f7ff ff6a 	bl	8000602 <Bootloader_SendNAck>
}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000050 	.word	0x20000050
 800073c:	e0042000 	.word	0xe0042000

08000740 <Bootloader_Read_Protection_Level>:
static void Bootloader_Read_Protection_Level(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
	uint16_t Host_PacketLen = BL_HOST_BUFFER[0U] + 1U;
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <Bootloader_Read_Protection_Level+0x5c>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b29b      	uxth	r3, r3
 800074c:	3301      	adds	r3, #1
 800074e:	81fb      	strh	r3, [r7, #14]
	uint32_t Host_CRC32 = 0UL;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
	uint8_t RDP_level = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	71fb      	strb	r3, [r7, #7]
	/*extract CRC from buffer */
	Host_CRC32 = *((uint32_t*)(BL_HOST_BUFFER + (Host_PacketLen - CRC_TYPE_SIZE)));
 8000758:	89fb      	ldrh	r3, [r7, #14]
 800075a:	3b04      	subs	r3, #4
 800075c:	4a0f      	ldr	r2, [pc, #60]	; (800079c <Bootloader_Read_Protection_Level+0x5c>)
 800075e:	4413      	add	r3, r2
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	60bb      	str	r3, [r7, #8]

	/*Calcualte my crc and verify  crc */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verifiy((uint32_t)(Host_PacketLen-CRC_TYPE_SIZE) , Host_CRC32) )
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	3b04      	subs	r3, #4
 8000768:	68b9      	ldr	r1, [r7, #8]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fefe 	bl	800056c <Bootloader_CRC_Verifiy>
 8000770:	4603      	mov	r3, r0
 8000772:	2b01      	cmp	r3, #1
 8000774:	d10c      	bne.n	8000790 <Bootloader_Read_Protection_Level+0x50>
	{
#ifdef  BL_ENABLE_DEBUG
			BL_PrintMsg("CRC Verification Passed %s" , BL_PRINT_NEWLINE);
#endif
		/*	Send Ack +  Reply message length	*/
		Bootloader_SendAck((uint8_t)1U);
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff ff30 	bl	80005dc <Bootloader_SendAck>
		/*	Read Protection level */
		RDP_level = BL_Read_Flash_Protection_Level();
 800077c:	f000 fa60 	bl	8000c40 <BL_Read_Flash_Protection_Level>
 8000780:	4603      	mov	r3, r0
 8000782:	71fb      	strb	r3, [r7, #7]
		/* Report Read Protection level  */
		BootLoader_SendData((uint8_t*)(&RDP_level), (uint32_t)1UL);
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	2101      	movs	r1, #1
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fa67 	bl	8000c5c <BootLoader_SendData>
			BL_PrintMsg("CRC Verification Failed %s" , BL_PRINT_NEWLINE);
#endif
		/*Send NACK */
		Bootloader_SendNAck();
	}
}
 800078e:	e001      	b.n	8000794 <Bootloader_Read_Protection_Level+0x54>
		Bootloader_SendNAck();
 8000790:	f7ff ff37 	bl	8000602 <Bootloader_SendNAck>
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000050 	.word	0x20000050

080007a0 <Bootloader_Jump_to_Address>:
static void Bootloader_Jump_to_Address(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
		uint16_t Host_PacketLen = BL_HOST_BUFFER[0U] + 1U;
 80007a6:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <Bootloader_Jump_to_Address+0xb0>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	3301      	adds	r3, #1
 80007ae:	82fb      	strh	r3, [r7, #22]
		uint32_t Host_CRC32 = 0UL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
		pJumpAddressFunc pJumpAddress = NULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
		uint32_t HostJumpAdress = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
		uint8_t Address_Verification = ADDRESS_IS_INVALID;
 80007bc:	2300      	movs	r3, #0
 80007be:	70fb      	strb	r3, [r7, #3]
		/*extract CRC from buffer */
		Host_CRC32 = *((uint32_t*)(BL_HOST_BUFFER + (Host_PacketLen - CRC_TYPE_SIZE)));
 80007c0:	8afb      	ldrh	r3, [r7, #22]
 80007c2:	3b04      	subs	r3, #4
 80007c4:	4a22      	ldr	r2, [pc, #136]	; (8000850 <Bootloader_Jump_to_Address+0xb0>)
 80007c6:	4413      	add	r3, r2
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	613b      	str	r3, [r7, #16]
		/*Calcualte my crc and verify  crc */
		if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verifiy((uint32_t)(Host_PacketLen-CRC_TYPE_SIZE) , Host_CRC32) )
 80007cc:	8afb      	ldrh	r3, [r7, #22]
 80007ce:	3b04      	subs	r3, #4
 80007d0:	6939      	ldr	r1, [r7, #16]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff feca 	bl	800056c <Bootloader_CRC_Verifiy>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d132      	bne.n	8000844 <Bootloader_Jump_to_Address+0xa4>
		{
	#ifdef  BL_ENABLE_DEBUG
				BL_PrintMsg("CRC Verification Passed %s" , BL_PRINT_NEWLINE);
	#endif
			/*Send Ack +  Reply message length*/
			Bootloader_SendAck((uint8_t)1U);
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff fefc 	bl	80005dc <Bootloader_SendAck>
			/* Parse  Address from host buffer */
			HostJumpAdress = *((uint32_t*)(&BL_HOST_BUFFER[2U]));
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <Bootloader_Jump_to_Address+0xb4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	607b      	str	r3, [r7, #4]
			Bootloader_SendNAck();
		}
}
__STATIC_FORCEINLINE uint8_t Bootloader_Host_Jump_Address_verification(uint32_t JumpAdress)
{
	if( (SRAM1_BASE  <=  JumpAdress)  && (BL_STM32F401_SRAM_END  >=  JumpAdress) )
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80007f4:	d305      	bcc.n	8000802 <Bootloader_Jump_to_Address+0x62>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a17      	ldr	r2, [pc, #92]	; (8000858 <Bootloader_Jump_to_Address+0xb8>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d801      	bhi.n	8000802 <Bootloader_Jump_to_Address+0x62>
	{
		return ADDRESS_IS_VALID;
 80007fe:	2301      	movs	r3, #1
 8000800:	e00a      	b.n	8000818 <Bootloader_Jump_to_Address+0x78>
	}
	else if ( (FLASH_BASE  <=  JumpAdress)  && (BL_STM32401_FLASH_END	  >=  JumpAdress) )
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000808:	d305      	bcc.n	8000816 <Bootloader_Jump_to_Address+0x76>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a13      	ldr	r2, [pc, #76]	; (800085c <Bootloader_Jump_to_Address+0xbc>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d801      	bhi.n	8000816 <Bootloader_Jump_to_Address+0x76>
	{
		return ADDRESS_IS_VALID;
 8000812:	2301      	movs	r3, #1
 8000814:	e000      	b.n	8000818 <Bootloader_Jump_to_Address+0x78>
	}
	else
	{ /*nothing */}
	return ADDRESS_IS_INVALID;
 8000816:	2300      	movs	r3, #0
			Address_Verification = Bootloader_Host_Jump_Address_verification(HostJumpAdress);
 8000818:	70fb      	strb	r3, [r7, #3]
			if ( ADDRESS_IS_VALID == Address_Verification )
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d10b      	bne.n	8000838 <Bootloader_Jump_to_Address+0x98>
				pJumpAddress = (pJumpAddressFunc)(HostJumpAdress | 0x01UL); /* Make sure that bit 0 in the address is 0(T-BIT) */
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
			BootLoader_SendData( (uint8_t*)(&Address_Verification), (uint32_t)1UL);
 8000828:	1cfb      	adds	r3, r7, #3
 800082a:	2101      	movs	r1, #1
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fa15 	bl	8000c5c <BootLoader_SendData>
				pJumpAddress();
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4798      	blx	r3
}
 8000836:	e007      	b.n	8000848 <Bootloader_Jump_to_Address+0xa8>
				BootLoader_SendData( (uint8_t*)(&Address_Verification), (uint32_t)1UL);
 8000838:	1cfb      	adds	r3, r7, #3
 800083a:	2101      	movs	r1, #1
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fa0d 	bl	8000c5c <BootLoader_SendData>
}
 8000842:	e001      	b.n	8000848 <Bootloader_Jump_to_Address+0xa8>
			Bootloader_SendNAck();
 8000844:	f7ff fedd 	bl	8000602 <Bootloader_SendNAck>
}
 8000848:	bf00      	nop
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000050 	.word	0x20000050
 8000854:	20000052 	.word	0x20000052
 8000858:	20010000 	.word	0x20010000
 800085c:	08040000 	.word	0x08040000

08000860 <Perfrom_Flash_Erase>:
}

static uint8_t Perfrom_Flash_Erase(uint8_t SectorNum , uint8_t NumberOfSectors)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	71fb      	strb	r3, [r7, #7]
 800086c:	4613      	mov	r3, r2
 800086e:	71bb      	strb	r3, [r7, #6]
	uint8_t FlashEraseStat = BL_INVALID_SECTOR_NUMBER;
 8000870:	2300      	movs	r3, #0
 8000872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t HAL_FLASH_STAT = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
	uint8_t remainingSectors = BL_STM32401_MAX_FLASH_SECTORS - SectorNum;
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	f1c3 0306 	rsb	r3, r3, #6
 8000880:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	HAL_StatusTypeDef HAL_STAT = HAL_OK;
 8000884:	2300      	movs	r3, #0
 8000886:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	FLASH_EraseInitTypeDef  EraseInit = {
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
 800089a:	2301      	movs	r3, #1
 800089c:	613b      	str	r3, [r7, #16]
			.Banks = FLASH_BANK_1,
			.Sector = (uint32_t)SectorNum,
 800089e:	79fb      	ldrb	r3, [r7, #7]
	FLASH_EraseInitTypeDef  EraseInit = {
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	2302      	movs	r3, #2
 80008a4:	61fb      	str	r3, [r7, #28]
			.VoltageRange = FLASH_VOLTAGE_RANGE_3
	};
	/*Check if start sector number and number of sectors are valid */
	if(((BL_STM32401_MAX_FLASH_SECTORS-1U) >= SectorNum || BL_FLASH_MASS_ERASE == SectorNum) )
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b05      	cmp	r3, #5
 80008aa:	d902      	bls.n	80008b2 <Perfrom_Flash_Erase+0x52>
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2bff      	cmp	r3, #255	; 0xff
 80008b0:	d142      	bne.n	8000938 <Perfrom_Flash_Erase+0xd8>
	{
		/* Check if SectorNumber  + number of sectors to be erased is valid if not valid erase from start sector to last  sector */
		if(NumberOfSectors >  remainingSectors)
 80008b2:	79ba      	ldrb	r2, [r7, #6]
 80008b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d903      	bls.n	80008c4 <Perfrom_Flash_Erase+0x64>
		{
			EraseInit.NbSectors = (uint32_t)remainingSectors;
 80008bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008c0:	61bb      	str	r3, [r7, #24]
 80008c2:	e001      	b.n	80008c8 <Perfrom_Flash_Erase+0x68>
		}
		else
		{
			EraseInit.NbSectors = (uint32_t)NumberOfSectors;
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	61bb      	str	r3, [r7, #24]
		}
		/*	Erase Flash sector or mass erase */
		if(BL_FLASH_MASS_ERASE == SectorNum)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2bff      	cmp	r3, #255	; 0xff
 80008cc:	d102      	bne.n	80008d4 <Perfrom_Flash_Erase+0x74>
		{
			/*Mass erase*/
			EraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80008ce:	2301      	movs	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	e001      	b.n	80008d8 <Perfrom_Flash_Erase+0x78>
		}
		else
		{
			/* Sector erase */
			EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
		}
#ifdef  BL_ENABLE_DEBUG
		BL_PrintMsg("Start Erasing Flash %s" , BL_PRINT_NEWLINE);
#endif
		/*UnLock Flash*/
		HAL_STAT |= HAL_FLASH_Unlock();
 80008d8:	f000 fe02 	bl	80014e0 <HAL_FLASH_Unlock>
 80008dc:	4603      	mov	r3, r0
 80008de:	461a      	mov	r2, r3
 80008e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008e4:	4313      	orrs	r3, r2
 80008e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		/*	Start flash erase */
		HAL_STAT |= HAL_FLASHEx_Erase(&EraseInit , &HAL_FLASH_STAT);
 80008ea:	f107 0220 	add.w	r2, r7, #32
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 ffa5 	bl	8001844 <HAL_FLASHEx_Erase>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461a      	mov	r2, r3
 80008fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000902:	4313      	orrs	r3, r2
 8000904:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		/* Check if Flash Erase Success */
		if(BL_HAL_SUCCESSFUL_ERASE == HAL_FLASH_STAT && HAL_OK == HAL_STAT)
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800090e:	d107      	bne.n	8000920 <Perfrom_Flash_Erase+0xc0>
 8000910:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000914:	2b00      	cmp	r3, #0
 8000916:	d103      	bne.n	8000920 <Perfrom_Flash_Erase+0xc0>
		{
			FlashEraseStat = BL_SUCCESSFUL_ERASE;
 8000918:	2303      	movs	r3, #3
 800091a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800091e:	e002      	b.n	8000926 <Perfrom_Flash_Erase+0xc6>
		}
		else
		{
			FlashEraseStat = BL_UNSUCCESSFUL_ERASE;
 8000920:	2302      	movs	r3, #2
 8000922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		/*Lock Flash*/
		HAL_STAT |= HAL_FLASH_Lock();
 8000926:	f000 fdfd 	bl	8001524 <HAL_FLASH_Lock>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000932:	4313      	orrs	r3, r2
 8000934:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}
	else
	{
		/*nothing*/
	}
	return FlashEraseStat;
 8000938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800093c:	4618      	mov	r0, r3
 800093e:	3728      	adds	r7, #40	; 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <Bootloader_Erase_Flash>:
static void Bootloader_Erase_Flash(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
	uint16_t Host_PacketLen = BL_HOST_BUFFER[0U] + 1U;
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <Bootloader_Erase_Flash+0x78>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b29b      	uxth	r3, r3
 8000950:	3301      	adds	r3, #1
 8000952:	81fb      	strh	r3, [r7, #14]
	uint32_t Host_CRC32 = 0UL;
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
	uint8_t NumberOfStartSector = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	71fb      	strb	r3, [r7, #7]
	uint8_t NumberOfSectors_Erease = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	71bb      	strb	r3, [r7, #6]
	uint8_t FlashEraseStat = BL_UNSUCCESSFUL_ERASE;
 8000960:	2302      	movs	r3, #2
 8000962:	717b      	strb	r3, [r7, #5]
	/*extract CRC from buffer */
	Host_CRC32 = *((uint32_t*)(BL_HOST_BUFFER + (Host_PacketLen - CRC_TYPE_SIZE)));
 8000964:	89fb      	ldrh	r3, [r7, #14]
 8000966:	3b04      	subs	r3, #4
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <Bootloader_Erase_Flash+0x78>)
 800096a:	4413      	add	r3, r2
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	60bb      	str	r3, [r7, #8]

	/*Calcualte my crc and verify  crc */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verifiy((uint32_t)(Host_PacketLen-CRC_TYPE_SIZE) , Host_CRC32) )
 8000970:	89fb      	ldrh	r3, [r7, #14]
 8000972:	3b04      	subs	r3, #4
 8000974:	68b9      	ldr	r1, [r7, #8]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fdf8 	bl	800056c <Bootloader_CRC_Verifiy>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d116      	bne.n	80009b0 <Bootloader_Erase_Flash+0x6c>
	{
#ifdef  BL_ENABLE_DEBUG
			BL_PrintMsg("CRC Verification Passed %s" , BL_PRINT_NEWLINE);
#endif
		/*Send Ack +  Reply message length*/
		Bootloader_SendAck((uint8_t)1U);
 8000982:	2001      	movs	r0, #1
 8000984:	f7ff fe2a 	bl	80005dc <Bootloader_SendAck>
		/*Extracts start sector number and number of sectors to erase */
		NumberOfStartSector = BL_HOST_BUFFER[2];
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <Bootloader_Erase_Flash+0x78>)
 800098a:	789b      	ldrb	r3, [r3, #2]
 800098c:	71fb      	strb	r3, [r7, #7]
		NumberOfSectors_Erease = BL_HOST_BUFFER[3];
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <Bootloader_Erase_Flash+0x78>)
 8000990:	78db      	ldrb	r3, [r3, #3]
 8000992:	71bb      	strb	r3, [r7, #6]
		/* Perfrom Flash erasing */
		FlashEraseStat = Perfrom_Flash_Erase(NumberOfStartSector , NumberOfSectors_Erease);
 8000994:	79ba      	ldrb	r2, [r7, #6]
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	4611      	mov	r1, r2
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff60 	bl	8000860 <Perfrom_Flash_Erase>
 80009a0:	4603      	mov	r3, r0
 80009a2:	717b      	strb	r3, [r7, #5]
#ifdef  BL_ENABLE_DEBUG
			BL_PrintMsg("Flsah Erase Stat -> %i %s" , FlashEraseStat , BL_PRINT_NEWLINE);
#endif
		 /* Report Erase operation status */
		BootLoader_SendData((uint8_t*)(&FlashEraseStat), (uint32_t)1UL);
 80009a4:	1d7b      	adds	r3, r7, #5
 80009a6:	2101      	movs	r1, #1
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 f957 	bl	8000c5c <BootLoader_SendData>
			BL_PrintMsg("CRC Verification Failed %s" , BL_PRINT_NEWLINE);
#endif
		/*Send NACK */
		Bootloader_SendNAck();
	}
}
 80009ae:	e001      	b.n	80009b4 <Bootloader_Erase_Flash+0x70>
		Bootloader_SendNAck();
 80009b0:	f7ff fe27 	bl	8000602 <Bootloader_SendNAck>
}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000050 	.word	0x20000050

080009c0 <Perfrom_Memory_Write>:
static uint8_t Perfrom_Memory_Write(uint8_t* pDataBuffer , uint8_t DataLen , uint32_t StartMemAddress)
{
 80009c0:	b5b0      	push	{r4, r5, r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	460b      	mov	r3, r1
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	72fb      	strb	r3, [r7, #11]
		HAL_StatusTypeDef HAL_stat = HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	75fb      	strb	r3, [r7, #23]
		uint8_t l_dataCounter = 0U;
 80009d2:	2300      	movs	r3, #0
 80009d4:	75bb      	strb	r3, [r7, #22]
		uint8_t WriteStat = BL_FLASH_WRITE_FAILED;
 80009d6:	2300      	movs	r3, #0
 80009d8:	757b      	strb	r3, [r7, #21]
		/*UnLock Flash*/
		HAL_stat = HAL_FLASH_Unlock();
 80009da:	f000 fd81 	bl	80014e0 <HAL_FLASH_Unlock>
 80009de:	4603      	mov	r3, r0
 80009e0:	75fb      	strb	r3, [r7, #23]

		for( ; (l_dataCounter < DataLen) && (HAL_OK == HAL_stat) ; ++l_dataCounter)
 80009e2:	e014      	b.n	8000a0e <Perfrom_Memory_Write+0x4e>
		{
			HAL_stat = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE , (StartMemAddress+l_dataCounter) , pDataBuffer[l_dataCounter]);
 80009e4:	7dba      	ldrb	r2, [r7, #22]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	18d1      	adds	r1, r2, r3
 80009ea:	7dbb      	ldrb	r3, [r7, #22]
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	461c      	mov	r4, r3
 80009f8:	4615      	mov	r5, r2
 80009fa:	4622      	mov	r2, r4
 80009fc:	462b      	mov	r3, r5
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 fd1a 	bl	8001438 <HAL_FLASH_Program>
 8000a04:	4603      	mov	r3, r0
 8000a06:	75fb      	strb	r3, [r7, #23]
		for( ; (l_dataCounter < DataLen) && (HAL_OK == HAL_stat) ; ++l_dataCounter)
 8000a08:	7dbb      	ldrb	r3, [r7, #22]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	75bb      	strb	r3, [r7, #22]
 8000a0e:	7dba      	ldrb	r2, [r7, #22]
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d202      	bcs.n	8000a1c <Perfrom_Memory_Write+0x5c>
 8000a16:	7dfb      	ldrb	r3, [r7, #23]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0e3      	beq.n	80009e4 <Perfrom_Memory_Write+0x24>
		}
		if((HAL_OK == HAL_stat))
 8000a1c:	7dfb      	ldrb	r3, [r7, #23]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d101      	bne.n	8000a26 <Perfrom_Memory_Write+0x66>
		{
			WriteStat = BL_FLASH_WRITE_PASSED;
 8000a22:	2301      	movs	r3, #1
 8000a24:	757b      	strb	r3, [r7, #21]
		}
		else{/*nothing*/}
		/*Lock Flash*/
		HAL_stat = HAL_FLASH_Lock();
 8000a26:	f000 fd7d 	bl	8001524 <HAL_FLASH_Lock>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	75fb      	strb	r3, [r7, #23]
		return WriteStat;
 8000a2e:	7d7b      	ldrb	r3, [r7, #21]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bdb0      	pop	{r4, r5, r7, pc}

08000a38 <Bootloader_Memory_Write>:
static void Bootloader_Memory_Write(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
		uint16_t Host_PacketLen = BL_HOST_BUFFER[0U] + 1U;
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <Bootloader_Memory_Write+0xc0>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	3301      	adds	r3, #1
 8000a46:	82fb      	strh	r3, [r7, #22]
		uint32_t Host_CRC32 = 0UL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
		uint32_t BaseMemeoryAddress = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
		uint8_t PayloadLen = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	72fb      	strb	r3, [r7, #11]
		uint8_t MemoryWriteStat = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	70fb      	strb	r3, [r7, #3]
		uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	70bb      	strb	r3, [r7, #2]
		/*extract CRC from buffer */
		Host_CRC32 = *((uint32_t*)(BL_HOST_BUFFER + (Host_PacketLen - CRC_TYPE_SIZE)));
 8000a5c:	8afb      	ldrh	r3, [r7, #22]
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	4a25      	ldr	r2, [pc, #148]	; (8000af8 <Bootloader_Memory_Write+0xc0>)
 8000a62:	4413      	add	r3, r2
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	613b      	str	r3, [r7, #16]

		/*Calcualte my crc and verify  crc */
		if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verifiy((uint32_t)(Host_PacketLen-CRC_TYPE_SIZE) , Host_CRC32) )
 8000a68:	8afb      	ldrh	r3, [r7, #22]
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	6939      	ldr	r1, [r7, #16]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fd7c 	bl	800056c <Bootloader_CRC_Verifiy>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d137      	bne.n	8000aea <Bootloader_Memory_Write+0xb2>
		{
	#ifdef  BL_ENABLE_DEBUG
				BL_PrintMsg("CRC Verification Passed %s" , BL_PRINT_NEWLINE);
	#endif
			/*Send Ack +  Reply message length*/
			Bootloader_SendAck((uint8_t)1U);
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f7ff fdae 	bl	80005dc <Bootloader_SendAck>
			/* Extract base memory address and payload Len */
			BaseMemeoryAddress = *((uint32_t*)(&BL_HOST_BUFFER[2U]));
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <Bootloader_Memory_Write+0xc4>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60fb      	str	r3, [r7, #12]
			PayloadLen  = BL_HOST_BUFFER[6U];
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <Bootloader_Memory_Write+0xc0>)
 8000a88:	799b      	ldrb	r3, [r3, #6]
 8000a8a:	72fb      	strb	r3, [r7, #11]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	607b      	str	r3, [r7, #4]
	if( (SRAM1_BASE  <=  JumpAdress)  && (BL_STM32F401_SRAM_END  >=  JumpAdress) )
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a96:	d305      	bcc.n	8000aa4 <Bootloader_Memory_Write+0x6c>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <Bootloader_Memory_Write+0xc8>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d801      	bhi.n	8000aa4 <Bootloader_Memory_Write+0x6c>
		return ADDRESS_IS_VALID;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e00a      	b.n	8000aba <Bootloader_Memory_Write+0x82>
	else if ( (FLASH_BASE  <=  JumpAdress)  && (BL_STM32401_FLASH_END	  >=  JumpAdress) )
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000aaa:	d305      	bcc.n	8000ab8 <Bootloader_Memory_Write+0x80>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <Bootloader_Memory_Write+0xcc>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d801      	bhi.n	8000ab8 <Bootloader_Memory_Write+0x80>
		return ADDRESS_IS_VALID;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e000      	b.n	8000aba <Bootloader_Memory_Write+0x82>
	return ADDRESS_IS_INVALID;
 8000ab8:	2300      	movs	r3, #0
			/*Verifiy Memeory address access */
			Address_Verification = Bootloader_Host_Jump_Address_verification(BaseMemeoryAddress);
 8000aba:	70bb      	strb	r3, [r7, #2]
			if( ADDRESS_IS_VALID == Address_Verification  )
 8000abc:	78bb      	ldrb	r3, [r7, #2]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d10d      	bne.n	8000ade <Bootloader_Memory_Write+0xa6>
			{
				/* Perfrom Memory write */
				MemoryWriteStat = Perfrom_Memory_Write((BL_HOST_BUFFER+7UL) , PayloadLen , BaseMemeoryAddress);
 8000ac2:	4811      	ldr	r0, [pc, #68]	; (8000b08 <Bootloader_Memory_Write+0xd0>)
 8000ac4:	7afb      	ldrb	r3, [r7, #11]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f7ff ff79 	bl	80009c0 <Perfrom_Memory_Write>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	70fb      	strb	r3, [r7, #3]
				/* Report write operation status */
				BootLoader_SendData((uint8_t*)(&MemoryWriteStat), (uint32_t)1UL);
 8000ad2:	1cfb      	adds	r3, r7, #3
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f8c0 	bl	8000c5c <BootLoader_SendData>
				BL_PrintMsg("CRC Verification Failed %s" , BL_PRINT_NEWLINE);
	#endif
			/*Send NACK */
			Bootloader_SendNAck();
		}
}
 8000adc:	e007      	b.n	8000aee <Bootloader_Memory_Write+0xb6>
				BootLoader_SendData((uint8_t*)(&Address_Verification), (uint32_t)1UL);
 8000ade:	1cbb      	adds	r3, r7, #2
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f8ba 	bl	8000c5c <BootLoader_SendData>
}
 8000ae8:	e001      	b.n	8000aee <Bootloader_Memory_Write+0xb6>
			Bootloader_SendNAck();
 8000aea:	f7ff fd8a 	bl	8000602 <Bootloader_SendNAck>
}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000050 	.word	0x20000050
 8000afc:	20000052 	.word	0x20000052
 8000b00:	20010000 	.word	0x20010000
 8000b04:	08040000 	.word	0x08040000
 8000b08:	20000057 	.word	0x20000057

08000b0c <BL_Change_ROP_Level>:
static uint8_t BL_Change_ROP_Level(uint8_t RDP_Level)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_stat = HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t ChangeROP_Stat = ROP_LEVEL_CHANGE_INVALID;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	FLASH_OBProgramInitTypeDef OBInit;
	/*Change RDP level to value to be written in reg*/
	switch(RDP_Level)
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d00c      	beq.n	8000b42 <BL_Change_ROP_Level+0x36>
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	dc0d      	bgt.n	8000b48 <BL_Change_ROP_Level+0x3c>
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d002      	beq.n	8000b36 <BL_Change_ROP_Level+0x2a>
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d003      	beq.n	8000b3c <BL_Change_ROP_Level+0x30>
 8000b34:	e008      	b.n	8000b48 <BL_Change_ROP_Level+0x3c>
	{
	case BL_ROP_LEVEL_0:  RDP_Level = OB_RDP_LEVEL_0;  break;
 8000b36:	23aa      	movs	r3, #170	; 0xaa
 8000b38:	71fb      	strb	r3, [r7, #7]
 8000b3a:	e008      	b.n	8000b4e <BL_Change_ROP_Level+0x42>
	case BL_ROP_LEVEL_1:  RDP_Level = OB_RDP_LEVEL_1;  break;
 8000b3c:	2355      	movs	r3, #85	; 0x55
 8000b3e:	71fb      	strb	r3, [r7, #7]
 8000b40:	e005      	b.n	8000b4e <BL_Change_ROP_Level+0x42>
	case BL_ROP_LEVEL_2:  RDP_Level = OB_RDP_LEVEL_2;  break;
 8000b42:	23cc      	movs	r3, #204	; 0xcc
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	e002      	b.n	8000b4e <BL_Change_ROP_Level+0x42>
	default:
		return ChangeROP_Stat;
 8000b48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b4c:	e039      	b.n	8000bc2 <BL_Change_ROP_Level+0xb6>
		break;

	}
	/*	Flash option bytes unlock	*/
	HAL_stat |= HAL_FLASH_OB_Unlock();
 8000b4e:	f000 fcf9 	bl	8001544 <HAL_FLASH_OB_Unlock>
 8000b52:	4603      	mov	r3, r0
 8000b54:	461a      	mov	r2, r3
 8000b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* change rdp level */
	OBInit.Banks = FLASH_BANK_1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
	OBInit.OptionType = OPTIONBYTE_RDP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	60bb      	str	r3, [r7, #8]
	OBInit.RDPLevel = (uint32_t)RDP_Level;
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	61bb      	str	r3, [r7, #24]
	HAL_stat |= HAL_FLASHEx_OBProgram(&OBInit);
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 fed7 	bl	8001924 <HAL_FLASHEx_OBProgram>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461a      	mov	r2, r3
 8000b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(HAL_OK == HAL_stat)
 8000b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d108      	bne.n	8000b9e <BL_Change_ROP_Level+0x92>
	{
		/* Lunch option bytes*/
		HAL_stat |= HAL_FLASH_OB_Launch();
 8000b8c:	f000 fd06 	bl	800159c <HAL_FLASH_OB_Launch>
 8000b90:	4603      	mov	r3, r0
 8000b92:	461a      	mov	r2, r3
 8000b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	else
	{	/*nothing*/	}

	/*	Flash  option bytes lock	*/
	HAL_stat |= HAL_FLASH_OB_Lock();
 8000b9e:	f000 fced 	bl	800157c <HAL_FLASH_OB_Lock>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000baa:	4313      	orrs	r3, r2
 8000bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(HAL_OK == HAL_stat)
 8000bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <BL_Change_ROP_Level+0xb2>
	{
		ChangeROP_Stat = ROP_LEVEL_CHANGE_VALID;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}
	else {/*nothing*/}
	return ChangeROP_Stat;
 8000bbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <Bootloader_ChangeReadProtection>:
static void Bootloader_ChangeReadProtection(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
		uint16_t Host_PacketLen = BL_HOST_BUFFER[0U] + 1U;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <Bootloader_ChangeReadProtection+0x70>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	3301      	adds	r3, #1
 8000bda:	81fb      	strh	r3, [r7, #14]
		uint32_t Host_CRC32 = 0UL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
		uint8_t RDP_ChangeStat = ROP_LEVEL_CHANGE_INVALID;
 8000be0:	2300      	movs	r3, #0
 8000be2:	71fb      	strb	r3, [r7, #7]
		/*extract CRC from buffer */
		Host_CRC32 = *((uint32_t*)(BL_HOST_BUFFER + (Host_PacketLen - CRC_TYPE_SIZE)));
 8000be4:	89fb      	ldrh	r3, [r7, #14]
 8000be6:	3b04      	subs	r3, #4
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <Bootloader_ChangeReadProtection+0x70>)
 8000bea:	4413      	add	r3, r2
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	60bb      	str	r3, [r7, #8]

		/*Calcualte my crc and verify  crc */
		if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verifiy((uint32_t)(Host_PacketLen-CRC_TYPE_SIZE) , Host_CRC32) )
 8000bf0:	89fb      	ldrh	r3, [r7, #14]
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fcb8 	bl	800056c <Bootloader_CRC_Verifiy>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d116      	bne.n	8000c30 <Bootloader_ChangeReadProtection+0x64>
		{
	#ifdef  BL_ENABLE_DEBUG
				BL_PrintMsg("CRC Verification Passed %s" , BL_PRINT_NEWLINE);
	#endif
			/*	Send Ack +  Reply message length	*/
			Bootloader_SendAck((uint8_t)1U);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f7ff fcea 	bl	80005dc <Bootloader_SendAck>
			/*	Change Read Protection level */
#ifdef BL_ENABLE_ROP_LEVEL_2

			RDP_ChangeStat = BL_Change_ROP_Level(BL_HOST_BUFFER[2U]);
#else
			if( BL_ROP_LEVEL_2 != BL_HOST_BUFFER[2U])
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <Bootloader_ChangeReadProtection+0x70>)
 8000c0a:	789b      	ldrb	r3, [r3, #2]
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d007      	beq.n	8000c20 <Bootloader_ChangeReadProtection+0x54>
			{
				RDP_ChangeStat = BL_Change_ROP_Level(BL_HOST_BUFFER[2U]);
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <Bootloader_ChangeReadProtection+0x70>)
 8000c12:	789b      	ldrb	r3, [r3, #2]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff79 	bl	8000b0c <BL_Change_ROP_Level>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
 8000c1e:	e001      	b.n	8000c24 <Bootloader_ChangeReadProtection+0x58>
			}
			else
			{
				RDP_ChangeStat = ROP_LEVEL_CHANGE_INVALID;
 8000c20:	2300      	movs	r3, #0
 8000c22:	71fb      	strb	r3, [r7, #7]
			}

#endif

			/* Report Changing RDP  level status   */
			BootLoader_SendData((uint8_t*)(&RDP_ChangeStat), (uint32_t)1UL);
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	2101      	movs	r1, #1
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 f817 	bl	8000c5c <BootLoader_SendData>
				BL_PrintMsg("CRC Verification Failed %s" , BL_PRINT_NEWLINE);
	#endif
			/*Send NACK */
			Bootloader_SendNAck();
		}
}
 8000c2e:	e001      	b.n	8000c34 <Bootloader_ChangeReadProtection+0x68>
			Bootloader_SendNAck();
 8000c30:	f7ff fce7 	bl	8000602 <Bootloader_SendNAck>
}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000050 	.word	0x20000050

08000c40 <BL_Read_Flash_Protection_Level>:
static uint8_t BL_Read_Flash_Protection_Level(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0

	 FLASH_OBProgramInitTypeDef pOBInit;
	 HAL_FLASHEx_OBGetConfig(&pOBInit);
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fed9 	bl	8001a00 <HAL_FLASHEx_OBGetConfig>

	 return ((uint8_t)(pOBInit.RDPLevel));
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	b2db      	uxtb	r3, r3
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3720      	adds	r7, #32
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <BootLoader_SendData>:
	}
}


static void BootLoader_SendData(uint8_t* pData , uint32_t DataLen)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef HalStat = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
#if  BL_ENABLE_UART_DEBUG_MSG == BL_DEBUG_METHOD
		/*Transmit msg using uart */
		HalStat = HAL_UART_Transmit(BL_DEBUG_UART , pData , DataLen , HAL_MAX_DELAY);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <BootLoader_SendData+0x2c>)
 8000c76:	f001 febb 	bl	80029f0 <HAL_UART_Transmit>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	73fb      	strb	r3, [r7, #15]
#endif

	/*to remove compiler warning*/
	UNUSED(HalStat);

}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200001b0 	.word	0x200001b0

08000c8c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_CRC_Init+0x20>)
 8000c92:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <MX_CRC_Init+0x24>)
 8000c94:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_CRC_Init+0x20>)
 8000c98:	f000 fb87 	bl	80013aa <HAL_CRC_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000ca2:	f000 f8c7 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000160 	.word	0x20000160
 8000cb0:	40023000 	.word	0x40023000

08000cb4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_CRC_MspInit+0x3c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d10d      	bne.n	8000ce2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_CRC_MspInit+0x40>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <HAL_CRC_MspInit+0x40>)
 8000cd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <HAL_CRC_MspInit+0x40>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40023000 	.word	0x40023000
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_GPIO_Init+0x30>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <MX_GPIO_Init+0x30>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_GPIO_Init+0x30>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	BL_Stat_t BL_Stat = BL_NACK;
 8000d32:	2301      	movs	r3, #1
 8000d34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d36:	f000 f9e1 	bl	80010fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3a:	f000 f811 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3e:	f7ff ffdb 	bl	8000cf8 <MX_GPIO_Init>
  MX_CRC_Init();
 8000d42:	f7ff ffa3 	bl	8000c8c <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000d46:	f000 f8cd 	bl	8000ee4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d4a:	f000 f8f5 	bl	8000f38 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BL_Stat |= BL_UART_Featch_Host_Command();
 8000d4e:	f7ff fbbf 	bl	80004d0 <BL_UART_Featch_Host_Command>
 8000d52:	4603      	mov	r3, r0
 8000d54:	461a      	mov	r2, r3
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	e7f7      	b.n	8000d4e <main+0x22>
	...

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0320 	add.w	r3, r7, #32
 8000d6a:	2230      	movs	r2, #48	; 0x30
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 fa90 	bl	8003294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <SystemClock_Config+0xd0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dac:	4a20      	ldr	r2, [pc, #128]	; (8000e30 <SystemClock_Config+0xd0>)
 8000dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <SystemClock_Config+0xd0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000dd8:	2354      	movs	r3, #84	; 0x54
 8000dda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000de0:	2304      	movs	r3, #4
 8000de2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de4:	f107 0320 	add.w	r3, r7, #32
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 f959 	bl	80020a0 <HAL_RCC_OscConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000df4:	f000 f81e 	bl	8000e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df8:	230f      	movs	r3, #15
 8000dfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2102      	movs	r1, #2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 fbbb 	bl	8002590 <HAL_RCC_ClockConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e20:	f000 f808 	bl	8000e34 <Error_Handler>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3750      	adds	r7, #80	; 0x50
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <Error_Handler+0x8>
	...

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000edc:	f000 f960 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_USART1_UART_Init+0x50>)
 8000eec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000ef0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_USART1_UART_Init+0x4c>)
 8000f1c:	f001 fd18 	bl	8002950 <HAL_UART_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f26:	f7ff ff85 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000168 	.word	0x20000168
 8000f34:	40011000 	.word	0x40011000

08000f38 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <MX_USART2_UART_Init+0x50>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f70:	f001 fcee 	bl	8002950 <HAL_UART_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f7a:	f7ff ff5b 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200001b0 	.word	0x200001b0
 8000f88:	40004400 	.word	0x40004400

08000f8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a32      	ldr	r2, [pc, #200]	; (8001074 <HAL_UART_MspInit+0xe8>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d12d      	bne.n	800100a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	4b31      	ldr	r3, [pc, #196]	; (8001078 <HAL_UART_MspInit+0xec>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a30      	ldr	r2, [pc, #192]	; (8001078 <HAL_UART_MspInit+0xec>)
 8000fb8:	f043 0310 	orr.w	r3, r3, #16
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <HAL_UART_MspInit+0xec>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	61bb      	str	r3, [r7, #24]
 8000fc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <HAL_UART_MspInit+0xec>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a29      	ldr	r2, [pc, #164]	; (8001078 <HAL_UART_MspInit+0xec>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b27      	ldr	r3, [pc, #156]	; (8001078 <HAL_UART_MspInit+0xec>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fe6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	481e      	ldr	r0, [pc, #120]	; (800107c <HAL_UART_MspInit+0xf0>)
 8001004:	f000 fec8 	bl	8001d98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001008:	e030      	b.n	800106c <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a1c      	ldr	r2, [pc, #112]	; (8001080 <HAL_UART_MspInit+0xf4>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d12b      	bne.n	800106c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_UART_MspInit+0xec>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	4a16      	ldr	r2, [pc, #88]	; (8001078 <HAL_UART_MspInit+0xec>)
 800101e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001022:	6413      	str	r3, [r2, #64]	; 0x40
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_UART_MspInit+0xec>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_UART_MspInit+0xec>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	4a0f      	ldr	r2, [pc, #60]	; (8001078 <HAL_UART_MspInit+0xec>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6313      	str	r3, [r2, #48]	; 0x30
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_UART_MspInit+0xec>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800104c:	230c      	movs	r3, #12
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800105c:	2307      	movs	r3, #7
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_UART_MspInit+0xf0>)
 8001068:	f000 fe96 	bl	8001d98 <HAL_GPIO_Init>
}
 800106c:	bf00      	nop
 800106e:	3730      	adds	r7, #48	; 0x30
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40011000 	.word	0x40011000
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000
 8001080:	40004400 	.word	0x40004400

08001084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001088:	f000 f826 	bl	80010d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800108c:	480c      	ldr	r0, [pc, #48]	; (80010c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800108e:	490d      	ldr	r1, [pc, #52]	; (80010c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a4:	4c0a      	ldr	r4, [pc, #40]	; (80010d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b2:	f002 f8f7 	bl	80032a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b6:	f7ff fe39 	bl	8000d2c <main>
  bx  lr    
 80010ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80010c8:	0800332c 	.word	0x0800332c
  ldr r2, =_sbss
 80010cc:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80010d0:	2000021c 	.word	0x2000021c

080010d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC_IRQHandler>
	...

080010d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <SystemInit+0x20>)
 80010de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <SystemInit+0x20>)
 80010e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <HAL_Init+0x40>)
 8001106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <HAL_Init+0x40>)
 8001112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_Init+0x40>)
 800111e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f90d 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	200f      	movs	r0, #15
 800112c:	f000 f808 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff fe86 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023c00 	.word	0x40023c00

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x54>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f917 	bl	8001392 <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 f8ed 	bl	800135a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <HAL_InitTick+0x5c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000028 	.word	0x20000028
 8001198:	20000030 	.word	0x20000030
 800119c:	2000002c 	.word	0x2000002c

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000030 	.word	0x20000030
 80011c4:	200001f8 	.word	0x200001f8

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	200001f8 	.word	0x200001f8

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	490c      	ldr	r1, [pc, #48]	; (8001290 <__NVIC_SetPriority+0x4c>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126c:	e00a      	b.n	8001284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4908      	ldr	r1, [pc, #32]	; (8001294 <__NVIC_SetPriority+0x50>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	440b      	add	r3, r1
 8001282:	761a      	strb	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f1c3 0307 	rsb	r3, r3, #7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	bf28      	it	cs
 80012b6:	2304      	movcs	r3, #4
 80012b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d902      	bls.n	80012c8 <NVIC_EncodePriority+0x30>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3b03      	subs	r3, #3
 80012c6:	e000      	b.n	80012ca <NVIC_EncodePriority+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001310:	d301      	bcc.n	8001316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001312:	2301      	movs	r3, #1
 8001314:	e00f      	b.n	8001336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <SysTick_Config+0x40>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131e:	210f      	movs	r1, #15
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f7ff ff8e 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <SysTick_Config+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SysTick_Config+0x40>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff47 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff5c 	bl	8001228 <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff8e 	bl	8001298 <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5d 	bl	8001244 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffb0 	bl	8001300 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e00e      	b.n	80013da <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	795b      	ldrb	r3, [r3, #5]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d105      	bne.n	80013d2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fc71 	bl	8000cb4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b087      	sub	sp, #28
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2202      	movs	r2, #2
 80013f6:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e00a      	b.n	8001414 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	441a      	add	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	d3f0      	bcc.n	80013fe <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2201      	movs	r2, #1
 8001428:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800142a:	693b      	ldr	r3, [r7, #16]
}
 800142c:	4618      	mov	r0, r3
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800144a:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <HAL_FLASH_Program+0xa0>)
 800144c:	7e1b      	ldrb	r3, [r3, #24]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <HAL_FLASH_Program+0x1e>
 8001452:	2302      	movs	r3, #2
 8001454:	e03b      	b.n	80014ce <HAL_FLASH_Program+0x96>
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <HAL_FLASH_Program+0xa0>)
 8001458:	2201      	movs	r2, #1
 800145a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800145c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001460:	f000 f8b0 	bl	80015c4 <FLASH_WaitForLastOperation>
 8001464:	4603      	mov	r3, r0
 8001466:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d12b      	bne.n	80014c6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d105      	bne.n	8001480 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001474:	783b      	ldrb	r3, [r7, #0]
 8001476:	4619      	mov	r1, r3
 8001478:	68b8      	ldr	r0, [r7, #8]
 800147a:	f000 f95b 	bl	8001734 <FLASH_Program_Byte>
 800147e:	e016      	b.n	80014ae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d105      	bne.n	8001492 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001486:	883b      	ldrh	r3, [r7, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	68b8      	ldr	r0, [r7, #8]
 800148c:	f000 f92e 	bl	80016ec <FLASH_Program_HalfWord>
 8001490:	e00d      	b.n	80014ae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d105      	bne.n	80014a4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	4619      	mov	r1, r3
 800149c:	68b8      	ldr	r0, [r7, #8]
 800149e:	f000 f903 	bl	80016a8 <FLASH_Program_Word>
 80014a2:	e004      	b.n	80014ae <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80014a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014a8:	68b8      	ldr	r0, [r7, #8]
 80014aa:	f000 f8cb 	bl	8001644 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014b2:	f000 f887 	bl	80015c4 <FLASH_WaitForLastOperation>
 80014b6:	4603      	mov	r3, r0
 80014b8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_FLASH_Program+0xa4>)
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	4a07      	ldr	r2, [pc, #28]	; (80014dc <HAL_FLASH_Program+0xa4>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <HAL_FLASH_Program+0xa0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	761a      	strb	r2, [r3, #24]
  
  return status;
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200001fc 	.word	0x200001fc
 80014dc:	40023c00 	.word	0x40023c00

080014e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_FLASH_Unlock+0x38>)
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	da0b      	bge.n	800150a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_FLASH_Unlock+0x38>)
 80014f4:	4a09      	ldr	r2, [pc, #36]	; (800151c <HAL_FLASH_Unlock+0x3c>)
 80014f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <HAL_FLASH_Unlock+0x38>)
 80014fa:	4a09      	ldr	r2, [pc, #36]	; (8001520 <HAL_FLASH_Unlock+0x40>)
 80014fc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_FLASH_Unlock+0x38>)
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	2b00      	cmp	r3, #0
 8001504:	da01      	bge.n	800150a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800150a:	79fb      	ldrb	r3, [r7, #7]
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40023c00 	.word	0x40023c00
 800151c:	45670123 	.word	0x45670123
 8001520:	cdef89ab 	.word	0xcdef89ab

08001524 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_FLASH_Lock+0x1c>)
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_FLASH_Lock+0x1c>)
 800152e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001532:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	40023c00 	.word	0x40023c00

08001544 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_FLASH_OB_Unlock+0x2c>)
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d007      	beq.n	8001564 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_FLASH_OB_Unlock+0x2c>)
 8001556:	4a07      	ldr	r2, [pc, #28]	; (8001574 <HAL_FLASH_OB_Unlock+0x30>)
 8001558:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_FLASH_OB_Unlock+0x2c>)
 800155c:	4a06      	ldr	r2, [pc, #24]	; (8001578 <HAL_FLASH_OB_Unlock+0x34>)
 800155e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001560:	2300      	movs	r3, #0
 8001562:	e000      	b.n	8001566 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	40023c00 	.word	0x40023c00
 8001574:	08192a3b 	.word	0x08192a3b
 8001578:	4c5d6e7f 	.word	0x4c5d6e7f

0800157c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_FLASH_OB_Lock+0x1c>)
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_FLASH_OB_Lock+0x1c>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40023c00 	.word	0x40023c00

0800159c <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <HAL_FLASH_OB_Launch+0x24>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_FLASH_OB_Launch+0x24>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 80015b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015b4:	f000 f806 	bl	80015c4 <FLASH_WaitForLastOperation>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023c14 	.word	0x40023c14

080015c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <FLASH_WaitForLastOperation+0x78>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80015d6:	f7ff fdf7 	bl	80011c8 <HAL_GetTick>
 80015da:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80015dc:	e010      	b.n	8001600 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d00c      	beq.n	8001600 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d007      	beq.n	80015fc <FLASH_WaitForLastOperation+0x38>
 80015ec:	f7ff fdec 	bl	80011c8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d201      	bcs.n	8001600 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e019      	b.n	8001634 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <FLASH_WaitForLastOperation+0x7c>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1e8      	bne.n	80015de <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <FLASH_WaitForLastOperation+0x7c>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <FLASH_WaitForLastOperation+0x7c>)
 800161a:	2201      	movs	r2, #1
 800161c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <FLASH_WaitForLastOperation+0x7c>)
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800162a:	f000 f8a5 	bl	8001778 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
  
}  
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200001fc 	.word	0x200001fc
 8001640:	40023c00 	.word	0x40023c00

08001644 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <FLASH_Program_DoubleWord+0x60>)
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <FLASH_Program_DoubleWord+0x60>)
 8001656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800165a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <FLASH_Program_DoubleWord+0x60>)
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <FLASH_Program_DoubleWord+0x60>)
 8001662:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001666:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <FLASH_Program_DoubleWord+0x60>)
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <FLASH_Program_DoubleWord+0x60>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800167a:	f3bf 8f6f 	isb	sy
}
 800167e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001680:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	000a      	movs	r2, r1
 800168e:	2300      	movs	r3, #0
 8001690:	68f9      	ldr	r1, [r7, #12]
 8001692:	3104      	adds	r1, #4
 8001694:	4613      	mov	r3, r2
 8001696:	600b      	str	r3, [r1, #0]
}
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	40023c00 	.word	0x40023c00

080016a8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016b2:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <FLASH_Program_Word+0x40>)
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	4a0c      	ldr	r2, [pc, #48]	; (80016e8 <FLASH_Program_Word+0x40>)
 80016b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <FLASH_Program_Word+0x40>)
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <FLASH_Program_Word+0x40>)
 80016c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <FLASH_Program_Word+0x40>)
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <FLASH_Program_Word+0x40>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	601a      	str	r2, [r3, #0]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	40023c00 	.word	0x40023c00

080016ec <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <FLASH_Program_HalfWord+0x44>)
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <FLASH_Program_HalfWord+0x44>)
 80016fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001702:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <FLASH_Program_HalfWord+0x44>)
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	4a09      	ldr	r2, [pc, #36]	; (8001730 <FLASH_Program_HalfWord+0x44>)
 800170a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <FLASH_Program_HalfWord+0x44>)
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	4a06      	ldr	r2, [pc, #24]	; (8001730 <FLASH_Program_HalfWord+0x44>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	801a      	strh	r2, [r3, #0]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00

08001734 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <FLASH_Program_Byte+0x40>)
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <FLASH_Program_Byte+0x40>)
 8001746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800174a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <FLASH_Program_Byte+0x40>)
 800174e:	4a09      	ldr	r2, [pc, #36]	; (8001774 <FLASH_Program_Byte+0x40>)
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <FLASH_Program_Byte+0x40>)
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	4a06      	ldr	r2, [pc, #24]	; (8001774 <FLASH_Program_Byte+0x40>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	701a      	strb	r2, [r3, #0]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40023c00 	.word	0x40023c00

08001778 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800177c:	4b2f      	ldr	r3, [pc, #188]	; (800183c <FLASH_SetErrorCode+0xc4>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001788:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <FLASH_SetErrorCode+0xc8>)
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	f043 0310 	orr.w	r3, r3, #16
 8001790:	4a2b      	ldr	r2, [pc, #172]	; (8001840 <FLASH_SetErrorCode+0xc8>)
 8001792:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001794:	4b29      	ldr	r3, [pc, #164]	; (800183c <FLASH_SetErrorCode+0xc4>)
 8001796:	2210      	movs	r2, #16
 8001798:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800179a:	4b28      	ldr	r3, [pc, #160]	; (800183c <FLASH_SetErrorCode+0xc4>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f003 0320 	and.w	r3, r3, #32
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d008      	beq.n	80017b8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80017a6:	4b26      	ldr	r3, [pc, #152]	; (8001840 <FLASH_SetErrorCode+0xc8>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f043 0308 	orr.w	r3, r3, #8
 80017ae:	4a24      	ldr	r2, [pc, #144]	; (8001840 <FLASH_SetErrorCode+0xc8>)
 80017b0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80017b2:	4b22      	ldr	r3, [pc, #136]	; (800183c <FLASH_SetErrorCode+0xc4>)
 80017b4:	2220      	movs	r2, #32
 80017b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <FLASH_SetErrorCode+0xc4>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80017c4:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <FLASH_SetErrorCode+0xc8>)
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <FLASH_SetErrorCode+0xc8>)
 80017ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <FLASH_SetErrorCode+0xc4>)
 80017d2:	2240      	movs	r2, #64	; 0x40
 80017d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <FLASH_SetErrorCode+0xc4>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d008      	beq.n	80017f4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <FLASH_SetErrorCode+0xc8>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <FLASH_SetErrorCode+0xc8>)
 80017ec:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <FLASH_SetErrorCode+0xc4>)
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <FLASH_SetErrorCode+0xc4>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d009      	beq.n	8001814 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <FLASH_SetErrorCode+0xc8>)
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <FLASH_SetErrorCode+0xc8>)
 800180a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <FLASH_SetErrorCode+0xc4>)
 800180e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001812:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <FLASH_SetErrorCode+0xc4>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <FLASH_SetErrorCode+0xc8>)
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	f043 0320 	orr.w	r3, r3, #32
 8001828:	4a05      	ldr	r2, [pc, #20]	; (8001840 <FLASH_SetErrorCode+0xc8>)
 800182a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <FLASH_SetErrorCode+0xc4>)
 800182e:	2202      	movs	r2, #2
 8001830:	60da      	str	r2, [r3, #12]
  }
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	40023c00 	.word	0x40023c00
 8001840:	200001fc 	.word	0x200001fc

08001844 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001856:	4b31      	ldr	r3, [pc, #196]	; (800191c <HAL_FLASHEx_Erase+0xd8>)
 8001858:	7e1b      	ldrb	r3, [r3, #24]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_FLASHEx_Erase+0x1e>
 800185e:	2302      	movs	r3, #2
 8001860:	e058      	b.n	8001914 <HAL_FLASHEx_Erase+0xd0>
 8001862:	4b2e      	ldr	r3, [pc, #184]	; (800191c <HAL_FLASHEx_Erase+0xd8>)
 8001864:	2201      	movs	r2, #1
 8001866:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001868:	f24c 3050 	movw	r0, #50000	; 0xc350
 800186c:	f7ff feaa 	bl	80015c4 <FLASH_WaitForLastOperation>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d148      	bne.n	800190c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	f04f 32ff 	mov.w	r2, #4294967295
 8001880:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d115      	bne.n	80018b6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4619      	mov	r1, r3
 8001896:	4610      	mov	r0, r2
 8001898:	f000 f8d6 	bl	8001a48 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800189c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018a0:	f7ff fe90 	bl	80015c4 <FLASH_WaitForLastOperation>
 80018a4:	4603      	mov	r3, r0
 80018a6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_FLASHEx_Erase+0xdc>)
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	4a1c      	ldr	r2, [pc, #112]	; (8001920 <HAL_FLASHEx_Erase+0xdc>)
 80018ae:	f023 0304 	bic.w	r3, r3, #4
 80018b2:	6113      	str	r3, [r2, #16]
 80018b4:	e028      	b.n	8001908 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	e01c      	b.n	80018f8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	4619      	mov	r1, r3
 80018c6:	68b8      	ldr	r0, [r7, #8]
 80018c8:	f000 f8e2 	bl	8001a90 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018d0:	f7ff fe78 	bl	80015c4 <FLASH_WaitForLastOperation>
 80018d4:	4603      	mov	r3, r0
 80018d6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_FLASHEx_Erase+0xdc>)
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	4a10      	ldr	r2, [pc, #64]	; (8001920 <HAL_FLASHEx_Erase+0xdc>)
 80018de:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80018e2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	601a      	str	r2, [r3, #0]
          break;
 80018f0:	e00a      	b.n	8001908 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	3301      	adds	r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	4413      	add	r3, r2
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	429a      	cmp	r2, r3
 8001906:	d3da      	bcc.n	80018be <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001908:	f000 fa00 	bl	8001d0c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_FLASHEx_Erase+0xd8>)
 800190e:	2200      	movs	r2, #0
 8001910:	761a      	strb	r2, [r3, #24]

  return status;
 8001912:	7bfb      	ldrb	r3, [r7, #15]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200001fc 	.word	0x200001fc
 8001920:	40023c00 	.word	0x40023c00

08001924 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001930:	4b32      	ldr	r3, [pc, #200]	; (80019fc <HAL_FLASHEx_OBProgram+0xd8>)
 8001932:	7e1b      	ldrb	r3, [r3, #24]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <HAL_FLASHEx_OBProgram+0x18>
 8001938:	2302      	movs	r3, #2
 800193a:	e05b      	b.n	80019f4 <HAL_FLASHEx_OBProgram+0xd0>
 800193c:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <HAL_FLASHEx_OBProgram+0xd8>)
 800193e:	2201      	movs	r2, #1
 8001940:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d018      	beq.n	8001980 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d10a      	bne.n	800196c <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	4619      	mov	r1, r3
 8001960:	4610      	mov	r0, r2
 8001962:	f000 f8dd 	bl	8001b20 <FLASH_OB_EnableWRP>
 8001966:	4603      	mov	r3, r0
 8001968:	73fb      	strb	r3, [r7, #15]
 800196a:	e009      	b.n	8001980 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4619      	mov	r1, r3
 8001976:	4610      	mov	r0, r2
 8001978:	f000 f8f4 	bl	8001b64 <FLASH_OB_DisableWRP>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d007      	beq.n	800199c <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f906 	bl	8001ba4 <FLASH_OB_RDP_LevelConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7e1b      	ldrb	r3, [r3, #24]
 80019ac:	f003 0320 	and.w	r3, r3, #32
 80019b0:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 80019b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ba:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 80019c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	f000 f906 	bl	8001bd8 <FLASH_OB_UserConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d007      	beq.n	80019ec <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f928 	bl	8001c38 <FLASH_OB_BOR_LevelConfig>
 80019e8:	4603      	mov	r3, r0
 80019ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_FLASHEx_OBProgram+0xd8>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	761a      	strb	r2, [r3, #24]

  return status;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200001fc 	.word	0x200001fc

08001a00 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8001a0e:	f000 f941 	bl	8001c94 <FLASH_OB_GetWRP>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8001a1a:	f000 f947 	bl	8001cac <FLASH_OB_GetRDP>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001a26:	f000 f925 	bl	8001c74 <FLASH_OB_GetUser>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8001a32:	f000 f95b 	bl	8001cec <FLASH_OB_GetBOR>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	615a      	str	r2, [r3, #20]
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a54:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <FLASH_MassErase+0x44>)
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	4a0c      	ldr	r2, [pc, #48]	; (8001a8c <FLASH_MassErase+0x44>)
 8001a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <FLASH_MassErase+0x44>)
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <FLASH_MassErase+0x44>)
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <FLASH_MassErase+0x44>)
 8001a6e:	691a      	ldr	r2, [r3, #16]
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	4313      	orrs	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <FLASH_MassErase+0x44>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6113      	str	r3, [r2, #16]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023c00 	.word	0x40023c00

08001a90 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	e010      	b.n	8001ace <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d103      	bne.n	8001aba <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	e009      	b.n	8001ace <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d103      	bne.n	8001ac8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	e002      	b.n	8001ace <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ac8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001acc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <FLASH_Erase_Sector+0x8c>)
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <FLASH_Erase_Sector+0x8c>)
 8001ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ad8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <FLASH_Erase_Sector+0x8c>)
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	490f      	ldr	r1, [pc, #60]	; (8001b1c <FLASH_Erase_Sector+0x8c>)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <FLASH_Erase_Sector+0x8c>)
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	4a0c      	ldr	r2, [pc, #48]	; (8001b1c <FLASH_Erase_Sector+0x8c>)
 8001aec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001af0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <FLASH_Erase_Sector+0x8c>)
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4313      	orrs	r3, r2
 8001afc:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <FLASH_Erase_Sector+0x8c>)
 8001afe:	f043 0302 	orr.w	r3, r3, #2
 8001b02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <FLASH_Erase_Sector+0x8c>)
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <FLASH_Erase_Sector+0x8c>)
 8001b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0e:	6113      	str	r3, [r2, #16]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	40023c00 	.word	0x40023c00

08001b20 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b32:	f7ff fd47 	bl	80015c4 <FLASH_WaitForLastOperation>
 8001b36:	4603      	mov	r3, r0
 8001b38:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10a      	bne.n	8001b56 <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <FLASH_OB_EnableWRP+0x40>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	4904      	ldr	r1, [pc, #16]	; (8001b60 <FLASH_OB_EnableWRP+0x40>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	800b      	strh	r3, [r1, #0]
  }

  return status;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023c16 	.word	0x40023c16

08001b64 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b72:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b76:	f7ff fd25 	bl	80015c4 <FLASH_WaitForLastOperation>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d108      	bne.n	8001b96 <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <FLASH_OB_DisableWRP+0x3c>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4904      	ldr	r1, [pc, #16]	; (8001ba0 <FLASH_OB_DisableWRP+0x3c>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	800b      	strh	r3, [r1, #0]
  }

  return status;
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40023c16 	.word	0x40023c16

08001ba4 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bb6:	f7ff fd05 	bl	80015c4 <FLASH_WaitForLastOperation>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 8001bc4:	4a03      	ldr	r2, [pc, #12]	; (8001bd4 <FLASH_OB_RDP_LevelConfig+0x30>)
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	7013      	strb	r3, [r2, #0]
  }

  return status;
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023c15 	.word	0x40023c15

08001bd8 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
 8001be2:	460b      	mov	r3, r1
 8001be4:	71bb      	strb	r3, [r7, #6]
 8001be6:	4613      	mov	r3, r2
 8001be8:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 8001bea:	23ff      	movs	r3, #255	; 0xff
 8001bec:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bf2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bf6:	f7ff fce5 	bl	80015c4 <FLASH_WaitForLastOperation>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 8001bfe:	7bbb      	ldrb	r3, [r7, #14]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d111      	bne.n	8001c28 <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <FLASH_OB_UserConfig+0x5c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 8001c10:	79ba      	ldrb	r2, [r7, #6]
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	797b      	ldrb	r3, [r7, #5]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4905      	ldr	r1, [pc, #20]	; (8001c34 <FLASH_OB_UserConfig+0x5c>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	700b      	strb	r3, [r1, #0]
  }

  return status;
 8001c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023c14 	.word	0x40023c14

08001c38 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <FLASH_OB_BOR_LevelConfig+0x38>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <FLASH_OB_BOR_LevelConfig+0x38>)
 8001c4a:	f023 030c 	bic.w	r3, r3, #12
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <FLASH_OB_BOR_LevelConfig+0x38>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4905      	ldr	r1, [pc, #20]	; (8001c70 <FLASH_OB_BOR_LevelConfig+0x38>)
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0

}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	40023c14 	.word	0x40023c14

08001c74 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <FLASH_OB_GetUser+0x1c>)
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f023 031f 	bic.w	r3, r3, #31
 8001c82:	b2db      	uxtb	r3, r3
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40023c00 	.word	0x40023c00

08001c94 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <FLASH_OB_GetWRP+0x14>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	b29b      	uxth	r3, r3
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40023c16 	.word	0x40023c16

08001cac <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8001cb2:	23aa      	movs	r3, #170	; 0xaa
 8001cb4:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <FLASH_OB_GetRDP+0x3c>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2bcc      	cmp	r3, #204	; 0xcc
 8001cbe:	d102      	bne.n	8001cc6 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8001cc0:	23cc      	movs	r3, #204	; 0xcc
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	e009      	b.n	8001cda <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <FLASH_OB_GetRDP+0x3c>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2baa      	cmp	r3, #170	; 0xaa
 8001cce:	d102      	bne.n	8001cd6 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8001cd0:	23aa      	movs	r3, #170	; 0xaa
 8001cd2:	71fb      	strb	r3, [r7, #7]
 8001cd4:	e001      	b.n	8001cda <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8001cd6:	2355      	movs	r3, #85	; 0x55
 8001cd8:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8001cda:	79fb      	ldrb	r3, [r7, #7]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	40023c15 	.word	0x40023c15

08001cec <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <FLASH_OB_GetBOR+0x1c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	b2db      	uxtb	r3, r3
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023c14 	.word	0x40023c14

08001d0c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d017      	beq.n	8001d4c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d26:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d3e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d40:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d017      	beq.n	8001d88 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d62:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d7a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <FLASH_FlushCaches+0x88>)
 8001d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d86:	6013      	str	r3, [r2, #0]
  }
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023c00 	.word	0x40023c00

08001d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	e159      	b.n	8002068 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001db4:	2201      	movs	r2, #1
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	f040 8148 	bne.w	8002062 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d005      	beq.n	8001dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d130      	bne.n	8001e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	2203      	movs	r2, #3
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e20:	2201      	movs	r2, #1
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	f003 0201 	and.w	r2, r3, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d017      	beq.n	8001e88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	2203      	movs	r2, #3
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d123      	bne.n	8001edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	08da      	lsrs	r2, r3, #3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3208      	adds	r2, #8
 8001e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	220f      	movs	r2, #15
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	08da      	lsrs	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3208      	adds	r2, #8
 8001ed6:	69b9      	ldr	r1, [r7, #24]
 8001ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0203 	and.w	r2, r3, #3
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80a2 	beq.w	8002062 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b57      	ldr	r3, [pc, #348]	; (8002080 <HAL_GPIO_Init+0x2e8>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	4a56      	ldr	r2, [pc, #344]	; (8002080 <HAL_GPIO_Init+0x2e8>)
 8001f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2e:	4b54      	ldr	r3, [pc, #336]	; (8002080 <HAL_GPIO_Init+0x2e8>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f3a:	4a52      	ldr	r2, [pc, #328]	; (8002084 <HAL_GPIO_Init+0x2ec>)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3302      	adds	r3, #2
 8001f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	220f      	movs	r2, #15
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a49      	ldr	r2, [pc, #292]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d019      	beq.n	8001f9a <HAL_GPIO_Init+0x202>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a48      	ldr	r2, [pc, #288]	; (800208c <HAL_GPIO_Init+0x2f4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <HAL_GPIO_Init+0x1fe>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a47      	ldr	r2, [pc, #284]	; (8002090 <HAL_GPIO_Init+0x2f8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00d      	beq.n	8001f92 <HAL_GPIO_Init+0x1fa>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a46      	ldr	r2, [pc, #280]	; (8002094 <HAL_GPIO_Init+0x2fc>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d007      	beq.n	8001f8e <HAL_GPIO_Init+0x1f6>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a45      	ldr	r2, [pc, #276]	; (8002098 <HAL_GPIO_Init+0x300>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d101      	bne.n	8001f8a <HAL_GPIO_Init+0x1f2>
 8001f86:	2304      	movs	r3, #4
 8001f88:	e008      	b.n	8001f9c <HAL_GPIO_Init+0x204>
 8001f8a:	2307      	movs	r3, #7
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_Init+0x204>
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e004      	b.n	8001f9c <HAL_GPIO_Init+0x204>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e002      	b.n	8001f9c <HAL_GPIO_Init+0x204>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <HAL_GPIO_Init+0x204>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	f002 0203 	and.w	r2, r2, #3
 8001fa2:	0092      	lsls	r2, r2, #2
 8001fa4:	4093      	lsls	r3, r2
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fac:	4935      	ldr	r1, [pc, #212]	; (8002084 <HAL_GPIO_Init+0x2ec>)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fba:	4b38      	ldr	r3, [pc, #224]	; (800209c <HAL_GPIO_Init+0x304>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fde:	4a2f      	ldr	r2, [pc, #188]	; (800209c <HAL_GPIO_Init+0x304>)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_GPIO_Init+0x304>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002008:	4a24      	ldr	r2, [pc, #144]	; (800209c <HAL_GPIO_Init+0x304>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800200e:	4b23      	ldr	r3, [pc, #140]	; (800209c <HAL_GPIO_Init+0x304>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002032:	4a1a      	ldr	r2, [pc, #104]	; (800209c <HAL_GPIO_Init+0x304>)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002038:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_GPIO_Init+0x304>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800205c:	4a0f      	ldr	r2, [pc, #60]	; (800209c <HAL_GPIO_Init+0x304>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3301      	adds	r3, #1
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	2b0f      	cmp	r3, #15
 800206c:	f67f aea2 	bls.w	8001db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800
 8002084:	40013800 	.word	0x40013800
 8002088:	40020000 	.word	0x40020000
 800208c:	40020400 	.word	0x40020400
 8002090:	40020800 	.word	0x40020800
 8002094:	40020c00 	.word	0x40020c00
 8002098:	40021000 	.word	0x40021000
 800209c:	40013c00 	.word	0x40013c00

080020a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e267      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d075      	beq.n	80021aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020be:	4b88      	ldr	r3, [pc, #544]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d00c      	beq.n	80020e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ca:	4b85      	ldr	r3, [pc, #532]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d112      	bne.n	80020fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d6:	4b82      	ldr	r3, [pc, #520]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020e2:	d10b      	bne.n	80020fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e4:	4b7e      	ldr	r3, [pc, #504]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d05b      	beq.n	80021a8 <HAL_RCC_OscConfig+0x108>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d157      	bne.n	80021a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e242      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002104:	d106      	bne.n	8002114 <HAL_RCC_OscConfig+0x74>
 8002106:	4b76      	ldr	r3, [pc, #472]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a75      	ldr	r2, [pc, #468]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 800210c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e01d      	b.n	8002150 <HAL_RCC_OscConfig+0xb0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0x98>
 800211e:	4b70      	ldr	r3, [pc, #448]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a6f      	ldr	r2, [pc, #444]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 8002124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b6d      	ldr	r3, [pc, #436]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a6c      	ldr	r2, [pc, #432]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0xb0>
 8002138:	4b69      	ldr	r3, [pc, #420]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a68      	ldr	r2, [pc, #416]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 800213e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b66      	ldr	r3, [pc, #408]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a65      	ldr	r2, [pc, #404]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 800214a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff f836 	bl	80011c8 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002160:	f7ff f832 	bl	80011c8 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	; 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e207      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	4b5b      	ldr	r3, [pc, #364]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0xc0>
 800217e:	e014      	b.n	80021aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff f822 	bl	80011c8 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002188:	f7ff f81e 	bl	80011c8 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1f3      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	4b51      	ldr	r3, [pc, #324]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0xe8>
 80021a6:	e000      	b.n	80021aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d063      	beq.n	800227e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021b6:	4b4a      	ldr	r3, [pc, #296]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021c2:	4b47      	ldr	r3, [pc, #284]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d11c      	bne.n	8002208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ce:	4b44      	ldr	r3, [pc, #272]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d116      	bne.n	8002208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021da:	4b41      	ldr	r3, [pc, #260]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <HAL_RCC_OscConfig+0x152>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e1c7      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f2:	4b3b      	ldr	r3, [pc, #236]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4937      	ldr	r1, [pc, #220]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002206:	e03a      	b.n	800227e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002210:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <HAL_RCC_OscConfig+0x244>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002216:	f7fe ffd7 	bl	80011c8 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221e:	f7fe ffd3 	bl	80011c8 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e1a8      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	4b2b      	ldr	r3, [pc, #172]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223c:	4b28      	ldr	r3, [pc, #160]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4925      	ldr	r1, [pc, #148]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
 8002250:	e015      	b.n	800227e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002252:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <HAL_RCC_OscConfig+0x244>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7fe ffb6 	bl	80011c8 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002260:	f7fe ffb2 	bl	80011c8 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e187      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d036      	beq.n	80022f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d016      	beq.n	80022c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_RCC_OscConfig+0x248>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002298:	f7fe ff96 	bl	80011c8 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a0:	f7fe ff92 	bl	80011c8 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e167      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_RCC_OscConfig+0x240>)
 80022b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x200>
 80022be:	e01b      	b.n	80022f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_RCC_OscConfig+0x248>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c6:	f7fe ff7f 	bl	80011c8 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022cc:	e00e      	b.n	80022ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ce:	f7fe ff7b 	bl	80011c8 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d907      	bls.n	80022ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e150      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
 80022e0:	40023800 	.word	0x40023800
 80022e4:	42470000 	.word	0x42470000
 80022e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ec:	4b88      	ldr	r3, [pc, #544]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 80022ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1ea      	bne.n	80022ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 8097 	beq.w	8002434 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230a:	4b81      	ldr	r3, [pc, #516]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10f      	bne.n	8002336 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	4b7d      	ldr	r3, [pc, #500]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	4a7c      	ldr	r2, [pc, #496]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 8002320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002324:	6413      	str	r3, [r2, #64]	; 0x40
 8002326:	4b7a      	ldr	r3, [pc, #488]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002332:	2301      	movs	r3, #1
 8002334:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002336:	4b77      	ldr	r3, [pc, #476]	; (8002514 <HAL_RCC_OscConfig+0x474>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d118      	bne.n	8002374 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002342:	4b74      	ldr	r3, [pc, #464]	; (8002514 <HAL_RCC_OscConfig+0x474>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a73      	ldr	r2, [pc, #460]	; (8002514 <HAL_RCC_OscConfig+0x474>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800234e:	f7fe ff3b 	bl	80011c8 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002356:	f7fe ff37 	bl	80011c8 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e10c      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	4b6a      	ldr	r3, [pc, #424]	; (8002514 <HAL_RCC_OscConfig+0x474>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d106      	bne.n	800238a <HAL_RCC_OscConfig+0x2ea>
 800237c:	4b64      	ldr	r3, [pc, #400]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002380:	4a63      	ldr	r2, [pc, #396]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6713      	str	r3, [r2, #112]	; 0x70
 8002388:	e01c      	b.n	80023c4 <HAL_RCC_OscConfig+0x324>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b05      	cmp	r3, #5
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0x30c>
 8002392:	4b5f      	ldr	r3, [pc, #380]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002396:	4a5e      	ldr	r2, [pc, #376]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 8002398:	f043 0304 	orr.w	r3, r3, #4
 800239c:	6713      	str	r3, [r2, #112]	; 0x70
 800239e:	4b5c      	ldr	r3, [pc, #368]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	4a5b      	ldr	r2, [pc, #364]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6713      	str	r3, [r2, #112]	; 0x70
 80023aa:	e00b      	b.n	80023c4 <HAL_RCC_OscConfig+0x324>
 80023ac:	4b58      	ldr	r3, [pc, #352]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 80023ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b0:	4a57      	ldr	r2, [pc, #348]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	6713      	str	r3, [r2, #112]	; 0x70
 80023b8:	4b55      	ldr	r3, [pc, #340]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	4a54      	ldr	r2, [pc, #336]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 80023be:	f023 0304 	bic.w	r3, r3, #4
 80023c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d015      	beq.n	80023f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023cc:	f7fe fefc 	bl	80011c8 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d2:	e00a      	b.n	80023ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d4:	f7fe fef8 	bl	80011c8 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e0cb      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ea:	4b49      	ldr	r3, [pc, #292]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 80023ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0ee      	beq.n	80023d4 <HAL_RCC_OscConfig+0x334>
 80023f6:	e014      	b.n	8002422 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f8:	f7fe fee6 	bl	80011c8 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fe:	e00a      	b.n	8002416 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002400:	f7fe fee2 	bl	80011c8 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	f241 3288 	movw	r2, #5000	; 0x1388
 800240e:	4293      	cmp	r3, r2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e0b5      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002416:	4b3e      	ldr	r3, [pc, #248]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1ee      	bne.n	8002400 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002422:	7dfb      	ldrb	r3, [r7, #23]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d105      	bne.n	8002434 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002428:	4b39      	ldr	r3, [pc, #228]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	4a38      	ldr	r2, [pc, #224]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 800242e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002432:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80a1 	beq.w	8002580 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800243e:	4b34      	ldr	r3, [pc, #208]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b08      	cmp	r3, #8
 8002448:	d05c      	beq.n	8002504 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d141      	bne.n	80024d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002452:	4b31      	ldr	r3, [pc, #196]	; (8002518 <HAL_RCC_OscConfig+0x478>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe feb6 	bl	80011c8 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002460:	f7fe feb2 	bl	80011c8 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e087      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002472:	4b27      	ldr	r3, [pc, #156]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69da      	ldr	r2, [r3, #28]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	019b      	lsls	r3, r3, #6
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	3b01      	subs	r3, #1
 8002498:	041b      	lsls	r3, r3, #16
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	061b      	lsls	r3, r3, #24
 80024a2:	491b      	ldr	r1, [pc, #108]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <HAL_RCC_OscConfig+0x478>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ae:	f7fe fe8b 	bl	80011c8 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b6:	f7fe fe87 	bl	80011c8 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e05c      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x416>
 80024d4:	e054      	b.n	8002580 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <HAL_RCC_OscConfig+0x478>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fe74 	bl	80011c8 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fe70 	bl	80011c8 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e045      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_RCC_OscConfig+0x470>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x444>
 8002502:	e03d      	b.n	8002580 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d107      	bne.n	800251c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e038      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
 8002510:	40023800 	.word	0x40023800
 8002514:	40007000 	.word	0x40007000
 8002518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800251c:	4b1b      	ldr	r3, [pc, #108]	; (800258c <HAL_RCC_OscConfig+0x4ec>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d028      	beq.n	800257c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d121      	bne.n	800257c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d11a      	bne.n	800257c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800254c:	4013      	ands	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002554:	4293      	cmp	r3, r2
 8002556:	d111      	bne.n	800257c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	085b      	lsrs	r3, r3, #1
 8002564:	3b01      	subs	r3, #1
 8002566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d107      	bne.n	800257c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800

08002590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0cc      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a4:	4b68      	ldr	r3, [pc, #416]	; (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d90c      	bls.n	80025cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b65      	ldr	r3, [pc, #404]	; (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b63      	ldr	r3, [pc, #396]	; (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0b8      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d020      	beq.n	800261a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e4:	4b59      	ldr	r3, [pc, #356]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4a58      	ldr	r2, [pc, #352]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025fc:	4b53      	ldr	r3, [pc, #332]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a52      	ldr	r2, [pc, #328]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002608:	4b50      	ldr	r3, [pc, #320]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	494d      	ldr	r1, [pc, #308]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d044      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	4b47      	ldr	r3, [pc, #284]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d119      	bne.n	800266e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e07f      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d003      	beq.n	800264e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800264a:	2b03      	cmp	r3, #3
 800264c:	d107      	bne.n	800265e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264e:	4b3f      	ldr	r3, [pc, #252]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e06f      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265e:	4b3b      	ldr	r3, [pc, #236]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e067      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266e:	4b37      	ldr	r3, [pc, #220]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f023 0203 	bic.w	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4934      	ldr	r1, [pc, #208]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	4313      	orrs	r3, r2
 800267e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002680:	f7fe fda2 	bl	80011c8 <HAL_GetTick>
 8002684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002686:	e00a      	b.n	800269e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002688:	f7fe fd9e 	bl	80011c8 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	; 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e04f      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	4b2b      	ldr	r3, [pc, #172]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 020c 	and.w	r2, r3, #12
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d1eb      	bne.n	8002688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d20c      	bcs.n	80026d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b22      	ldr	r3, [pc, #136]	; (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e032      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	4916      	ldr	r1, [pc, #88]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d009      	beq.n	8002716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	490e      	ldr	r1, [pc, #56]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002716:	f000 f821 	bl	800275c <HAL_RCC_GetSysClockFreq>
 800271a:	4602      	mov	r2, r0
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	490a      	ldr	r1, [pc, #40]	; (8002750 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	5ccb      	ldrb	r3, [r1, r3]
 800272a:	fa22 f303 	lsr.w	r3, r2, r3
 800272e:	4a09      	ldr	r2, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fd02 	bl	8001140 <HAL_InitTick>

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023c00 	.word	0x40023c00
 800274c:	40023800 	.word	0x40023800
 8002750:	08003304 	.word	0x08003304
 8002754:	20000028 	.word	0x20000028
 8002758:	2000002c 	.word	0x2000002c

0800275c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800275c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002760:	b090      	sub	sp, #64	; 0x40
 8002762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	637b      	str	r3, [r7, #52]	; 0x34
 8002768:	2300      	movs	r3, #0
 800276a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800276c:	2300      	movs	r3, #0
 800276e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002774:	4b59      	ldr	r3, [pc, #356]	; (80028dc <HAL_RCC_GetSysClockFreq+0x180>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d00d      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x40>
 8002780:	2b08      	cmp	r3, #8
 8002782:	f200 80a1 	bhi.w	80028c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x34>
 800278a:	2b04      	cmp	r3, #4
 800278c:	d003      	beq.n	8002796 <HAL_RCC_GetSysClockFreq+0x3a>
 800278e:	e09b      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002790:	4b53      	ldr	r3, [pc, #332]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002792:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002794:	e09b      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002796:	4b53      	ldr	r3, [pc, #332]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002798:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800279a:	e098      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800279c:	4b4f      	ldr	r3, [pc, #316]	; (80028dc <HAL_RCC_GetSysClockFreq+0x180>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027a6:	4b4d      	ldr	r3, [pc, #308]	; (80028dc <HAL_RCC_GetSysClockFreq+0x180>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d028      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b2:	4b4a      	ldr	r3, [pc, #296]	; (80028dc <HAL_RCC_GetSysClockFreq+0x180>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	099b      	lsrs	r3, r3, #6
 80027b8:	2200      	movs	r2, #0
 80027ba:	623b      	str	r3, [r7, #32]
 80027bc:	627a      	str	r2, [r7, #36]	; 0x24
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027c4:	2100      	movs	r1, #0
 80027c6:	4b47      	ldr	r3, [pc, #284]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80027c8:	fb03 f201 	mul.w	r2, r3, r1
 80027cc:	2300      	movs	r3, #0
 80027ce:	fb00 f303 	mul.w	r3, r0, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	4a43      	ldr	r2, [pc, #268]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80027d6:	fba0 1202 	umull	r1, r2, r0, r2
 80027da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027dc:	460a      	mov	r2, r1
 80027de:	62ba      	str	r2, [r7, #40]	; 0x28
 80027e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e2:	4413      	add	r3, r2
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e8:	2200      	movs	r2, #0
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	61fa      	str	r2, [r7, #28]
 80027ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027f6:	f7fd fced 	bl	80001d4 <__aeabi_uldivmod>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4613      	mov	r3, r2
 8002800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002802:	e053      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002804:	4b35      	ldr	r3, [pc, #212]	; (80028dc <HAL_RCC_GetSysClockFreq+0x180>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	2200      	movs	r2, #0
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	617a      	str	r2, [r7, #20]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002816:	f04f 0b00 	mov.w	fp, #0
 800281a:	4652      	mov	r2, sl
 800281c:	465b      	mov	r3, fp
 800281e:	f04f 0000 	mov.w	r0, #0
 8002822:	f04f 0100 	mov.w	r1, #0
 8002826:	0159      	lsls	r1, r3, #5
 8002828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800282c:	0150      	lsls	r0, r2, #5
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	ebb2 080a 	subs.w	r8, r2, sl
 8002836:	eb63 090b 	sbc.w	r9, r3, fp
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002846:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800284a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800284e:	ebb2 0408 	subs.w	r4, r2, r8
 8002852:	eb63 0509 	sbc.w	r5, r3, r9
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	00eb      	lsls	r3, r5, #3
 8002860:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002864:	00e2      	lsls	r2, r4, #3
 8002866:	4614      	mov	r4, r2
 8002868:	461d      	mov	r5, r3
 800286a:	eb14 030a 	adds.w	r3, r4, sl
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	eb45 030b 	adc.w	r3, r5, fp
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002882:	4629      	mov	r1, r5
 8002884:	028b      	lsls	r3, r1, #10
 8002886:	4621      	mov	r1, r4
 8002888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800288c:	4621      	mov	r1, r4
 800288e:	028a      	lsls	r2, r1, #10
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002896:	2200      	movs	r2, #0
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	60fa      	str	r2, [r7, #12]
 800289c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028a0:	f7fd fc98 	bl	80001d4 <__aeabi_uldivmod>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4613      	mov	r3, r2
 80028aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_GetSysClockFreq+0x180>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	0c1b      	lsrs	r3, r3, #16
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	3301      	adds	r3, #1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028c6:	e002      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80028ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3740      	adds	r7, #64	; 0x40
 80028d4:	46bd      	mov	sp, r7
 80028d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	00f42400 	.word	0x00f42400
 80028e4:	017d7840 	.word	0x017d7840

080028e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000028 	.word	0x20000028

08002900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002904:	f7ff fff0 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0a9b      	lsrs	r3, r3, #10
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4903      	ldr	r1, [pc, #12]	; (8002924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40023800 	.word	0x40023800
 8002924:	08003314 	.word	0x08003314

08002928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800292c:	f7ff ffdc 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002930:	4602      	mov	r2, r0
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	0b5b      	lsrs	r3, r3, #13
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	4903      	ldr	r1, [pc, #12]	; (800294c <HAL_RCC_GetPCLK2Freq+0x24>)
 800293e:	5ccb      	ldrb	r3, [r1, r3]
 8002940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40023800 	.word	0x40023800
 800294c:	08003314 	.word	0x08003314

08002950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e042      	b.n	80029e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fb08 	bl	8000f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2224      	movs	r2, #36	; 0x24
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fa09 	bl	8002dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d175      	bne.n	8002afc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_UART_Transmit+0x2c>
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e06e      	b.n	8002afe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2221      	movs	r2, #33	; 0x21
 8002a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a2e:	f7fe fbcb 	bl	80011c8 <HAL_GetTick>
 8002a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	88fa      	ldrh	r2, [r7, #6]
 8002a38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	88fa      	ldrh	r2, [r7, #6]
 8002a3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a48:	d108      	bne.n	8002a5c <HAL_UART_Transmit+0x6c>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	e003      	b.n	8002a64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a64:	e02e      	b.n	8002ac4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2180      	movs	r1, #128	; 0x80
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f8df 	bl	8002c34 <UART_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e03a      	b.n	8002afe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	61bb      	str	r3, [r7, #24]
 8002aa4:	e007      	b.n	8002ab6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1cb      	bne.n	8002a66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2140      	movs	r1, #64	; 0x40
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f8ab 	bl	8002c34 <UART_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e006      	b.n	8002afe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b08a      	sub	sp, #40	; 0x28
 8002b0a:	af02      	add	r7, sp, #8
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	603b      	str	r3, [r7, #0]
 8002b12:	4613      	mov	r3, r2
 8002b14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	f040 8081 	bne.w	8002c2a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_UART_Receive+0x2e>
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e079      	b.n	8002c2c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2222      	movs	r2, #34	; 0x22
 8002b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fb3c 	bl	80011c8 <HAL_GetTick>
 8002b50:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	88fa      	ldrh	r2, [r7, #6]
 8002b5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b66:	d108      	bne.n	8002b7a <HAL_UART_Receive+0x74>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d104      	bne.n	8002b7a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	e003      	b.n	8002b82 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b82:	e047      	b.n	8002c14 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2120      	movs	r1, #32
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f850 	bl	8002c34 <UART_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e042      	b.n	8002c2c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10c      	bne.n	8002bc6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	e01f      	b.n	8002c06 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bce:	d007      	beq.n	8002be0 <HAL_UART_Receive+0xda>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10a      	bne.n	8002bee <HAL_UART_Receive+0xe8>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e008      	b.n	8002c00 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	3301      	adds	r3, #1
 8002c04:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1b2      	bne.n	8002b84 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e000      	b.n	8002c2c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
  }
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c44:	e03b      	b.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d037      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7fe fabb 	bl	80011c8 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	6a3a      	ldr	r2, [r7, #32]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e03a      	b.n	8002cde <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d023      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b80      	cmp	r3, #128	; 0x80
 8002c7a:	d020      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b40      	cmp	r3, #64	; 0x40
 8002c80:	d01d      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d116      	bne.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f81d 	bl	8002ce6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2208      	movs	r2, #8
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00f      	b.n	8002cde <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	bf0c      	ite	eq
 8002cce:	2301      	moveq	r3, #1
 8002cd0:	2300      	movne	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d0b4      	beq.n	8002c46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b095      	sub	sp, #84	; 0x54
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	330c      	adds	r3, #12
 8002cf4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf8:	e853 3f00 	ldrex	r3, [r3]
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d0e:	643a      	str	r2, [r7, #64]	; 0x40
 8002d10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d16:	e841 2300 	strex	r3, r2, [r1]
 8002d1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1e5      	bne.n	8002cee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3314      	adds	r3, #20
 8002d28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	e853 3f00 	ldrex	r3, [r3]
 8002d30:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3314      	adds	r3, #20
 8002d40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d4a:	e841 2300 	strex	r3, r2, [r1]
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1e5      	bne.n	8002d22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d119      	bne.n	8002d92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	330c      	adds	r3, #12
 8002d64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	e853 3f00 	ldrex	r3, [r3]
 8002d6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f023 0310 	bic.w	r3, r3, #16
 8002d74:	647b      	str	r3, [r7, #68]	; 0x44
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	330c      	adds	r3, #12
 8002d7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d7e:	61ba      	str	r2, [r7, #24]
 8002d80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	6979      	ldr	r1, [r7, #20]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e5      	bne.n	8002d5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002da0:	bf00      	nop
 8002da2:	3754      	adds	r7, #84	; 0x54
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db0:	b0c0      	sub	sp, #256	; 0x100
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc8:	68d9      	ldr	r1, [r3, #12]
 8002dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	ea40 0301 	orr.w	r3, r0, r1
 8002dd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e04:	f021 010c 	bic.w	r1, r1, #12
 8002e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e12:	430b      	orrs	r3, r1
 8002e14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e26:	6999      	ldr	r1, [r3, #24]
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	ea40 0301 	orr.w	r3, r0, r1
 8002e32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	4b8f      	ldr	r3, [pc, #572]	; (8003078 <UART_SetConfig+0x2cc>)
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d005      	beq.n	8002e4c <UART_SetConfig+0xa0>
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4b8d      	ldr	r3, [pc, #564]	; (800307c <UART_SetConfig+0x2d0>)
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d104      	bne.n	8002e56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e4c:	f7ff fd6c 	bl	8002928 <HAL_RCC_GetPCLK2Freq>
 8002e50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e54:	e003      	b.n	8002e5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e56:	f7ff fd53 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8002e5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e68:	f040 810c 	bne.w	8003084 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e70:	2200      	movs	r2, #0
 8002e72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e7e:	4622      	mov	r2, r4
 8002e80:	462b      	mov	r3, r5
 8002e82:	1891      	adds	r1, r2, r2
 8002e84:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e86:	415b      	adcs	r3, r3
 8002e88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e8e:	4621      	mov	r1, r4
 8002e90:	eb12 0801 	adds.w	r8, r2, r1
 8002e94:	4629      	mov	r1, r5
 8002e96:	eb43 0901 	adc.w	r9, r3, r1
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eae:	4690      	mov	r8, r2
 8002eb0:	4699      	mov	r9, r3
 8002eb2:	4623      	mov	r3, r4
 8002eb4:	eb18 0303 	adds.w	r3, r8, r3
 8002eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ebc:	462b      	mov	r3, r5
 8002ebe:	eb49 0303 	adc.w	r3, r9, r3
 8002ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ed2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002eda:	460b      	mov	r3, r1
 8002edc:	18db      	adds	r3, r3, r3
 8002ede:	653b      	str	r3, [r7, #80]	; 0x50
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	eb42 0303 	adc.w	r3, r2, r3
 8002ee6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ee8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002eec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ef0:	f7fd f970 	bl	80001d4 <__aeabi_uldivmod>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4b61      	ldr	r3, [pc, #388]	; (8003080 <UART_SetConfig+0x2d4>)
 8002efa:	fba3 2302 	umull	r2, r3, r3, r2
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	011c      	lsls	r4, r3, #4
 8002f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f06:	2200      	movs	r2, #0
 8002f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f14:	4642      	mov	r2, r8
 8002f16:	464b      	mov	r3, r9
 8002f18:	1891      	adds	r1, r2, r2
 8002f1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f1c:	415b      	adcs	r3, r3
 8002f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f24:	4641      	mov	r1, r8
 8002f26:	eb12 0a01 	adds.w	sl, r2, r1
 8002f2a:	4649      	mov	r1, r9
 8002f2c:	eb43 0b01 	adc.w	fp, r3, r1
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f44:	4692      	mov	sl, r2
 8002f46:	469b      	mov	fp, r3
 8002f48:	4643      	mov	r3, r8
 8002f4a:	eb1a 0303 	adds.w	r3, sl, r3
 8002f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f52:	464b      	mov	r3, r9
 8002f54:	eb4b 0303 	adc.w	r3, fp, r3
 8002f58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f70:	460b      	mov	r3, r1
 8002f72:	18db      	adds	r3, r3, r3
 8002f74:	643b      	str	r3, [r7, #64]	; 0x40
 8002f76:	4613      	mov	r3, r2
 8002f78:	eb42 0303 	adc.w	r3, r2, r3
 8002f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f86:	f7fd f925 	bl	80001d4 <__aeabi_uldivmod>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4b3b      	ldr	r3, [pc, #236]	; (8003080 <UART_SetConfig+0x2d4>)
 8002f92:	fba3 2301 	umull	r2, r3, r3, r1
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2264      	movs	r2, #100	; 0x64
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	1acb      	subs	r3, r1, r3
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002fa6:	4b36      	ldr	r3, [pc, #216]	; (8003080 <UART_SetConfig+0x2d4>)
 8002fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8002fac:	095b      	lsrs	r3, r3, #5
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fb4:	441c      	add	r4, r3
 8002fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fc8:	4642      	mov	r2, r8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	1891      	adds	r1, r2, r2
 8002fce:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fd0:	415b      	adcs	r3, r3
 8002fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fd8:	4641      	mov	r1, r8
 8002fda:	1851      	adds	r1, r2, r1
 8002fdc:	6339      	str	r1, [r7, #48]	; 0x30
 8002fde:	4649      	mov	r1, r9
 8002fe0:	414b      	adcs	r3, r1
 8002fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ff0:	4659      	mov	r1, fp
 8002ff2:	00cb      	lsls	r3, r1, #3
 8002ff4:	4651      	mov	r1, sl
 8002ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ffa:	4651      	mov	r1, sl
 8002ffc:	00ca      	lsls	r2, r1, #3
 8002ffe:	4610      	mov	r0, r2
 8003000:	4619      	mov	r1, r3
 8003002:	4603      	mov	r3, r0
 8003004:	4642      	mov	r2, r8
 8003006:	189b      	adds	r3, r3, r2
 8003008:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800300c:	464b      	mov	r3, r9
 800300e:	460a      	mov	r2, r1
 8003010:	eb42 0303 	adc.w	r3, r2, r3
 8003014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003024:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003028:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800302c:	460b      	mov	r3, r1
 800302e:	18db      	adds	r3, r3, r3
 8003030:	62bb      	str	r3, [r7, #40]	; 0x28
 8003032:	4613      	mov	r3, r2
 8003034:	eb42 0303 	adc.w	r3, r2, r3
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800303a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800303e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003042:	f7fd f8c7 	bl	80001d4 <__aeabi_uldivmod>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <UART_SetConfig+0x2d4>)
 800304c:	fba3 1302 	umull	r1, r3, r3, r2
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	2164      	movs	r1, #100	; 0x64
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	3332      	adds	r3, #50	; 0x32
 800305e:	4a08      	ldr	r2, [pc, #32]	; (8003080 <UART_SetConfig+0x2d4>)
 8003060:	fba2 2303 	umull	r2, r3, r2, r3
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	f003 0207 	and.w	r2, r3, #7
 800306a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4422      	add	r2, r4
 8003072:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003074:	e106      	b.n	8003284 <UART_SetConfig+0x4d8>
 8003076:	bf00      	nop
 8003078:	40011000 	.word	0x40011000
 800307c:	40011400 	.word	0x40011400
 8003080:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003088:	2200      	movs	r2, #0
 800308a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800308e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003092:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003096:	4642      	mov	r2, r8
 8003098:	464b      	mov	r3, r9
 800309a:	1891      	adds	r1, r2, r2
 800309c:	6239      	str	r1, [r7, #32]
 800309e:	415b      	adcs	r3, r3
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
 80030a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030a6:	4641      	mov	r1, r8
 80030a8:	1854      	adds	r4, r2, r1
 80030aa:	4649      	mov	r1, r9
 80030ac:	eb43 0501 	adc.w	r5, r3, r1
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	00eb      	lsls	r3, r5, #3
 80030ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030be:	00e2      	lsls	r2, r4, #3
 80030c0:	4614      	mov	r4, r2
 80030c2:	461d      	mov	r5, r3
 80030c4:	4643      	mov	r3, r8
 80030c6:	18e3      	adds	r3, r4, r3
 80030c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030cc:	464b      	mov	r3, r9
 80030ce:	eb45 0303 	adc.w	r3, r5, r3
 80030d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030f2:	4629      	mov	r1, r5
 80030f4:	008b      	lsls	r3, r1, #2
 80030f6:	4621      	mov	r1, r4
 80030f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030fc:	4621      	mov	r1, r4
 80030fe:	008a      	lsls	r2, r1, #2
 8003100:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003104:	f7fd f866 	bl	80001d4 <__aeabi_uldivmod>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4b60      	ldr	r3, [pc, #384]	; (8003290 <UART_SetConfig+0x4e4>)
 800310e:	fba3 2302 	umull	r2, r3, r3, r2
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	011c      	lsls	r4, r3, #4
 8003116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800311a:	2200      	movs	r2, #0
 800311c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003120:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003124:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003128:	4642      	mov	r2, r8
 800312a:	464b      	mov	r3, r9
 800312c:	1891      	adds	r1, r2, r2
 800312e:	61b9      	str	r1, [r7, #24]
 8003130:	415b      	adcs	r3, r3
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003138:	4641      	mov	r1, r8
 800313a:	1851      	adds	r1, r2, r1
 800313c:	6139      	str	r1, [r7, #16]
 800313e:	4649      	mov	r1, r9
 8003140:	414b      	adcs	r3, r1
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003150:	4659      	mov	r1, fp
 8003152:	00cb      	lsls	r3, r1, #3
 8003154:	4651      	mov	r1, sl
 8003156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800315a:	4651      	mov	r1, sl
 800315c:	00ca      	lsls	r2, r1, #3
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	4603      	mov	r3, r0
 8003164:	4642      	mov	r2, r8
 8003166:	189b      	adds	r3, r3, r2
 8003168:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800316c:	464b      	mov	r3, r9
 800316e:	460a      	mov	r2, r1
 8003170:	eb42 0303 	adc.w	r3, r2, r3
 8003174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	67bb      	str	r3, [r7, #120]	; 0x78
 8003182:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003190:	4649      	mov	r1, r9
 8003192:	008b      	lsls	r3, r1, #2
 8003194:	4641      	mov	r1, r8
 8003196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800319a:	4641      	mov	r1, r8
 800319c:	008a      	lsls	r2, r1, #2
 800319e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031a2:	f7fd f817 	bl	80001d4 <__aeabi_uldivmod>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4611      	mov	r1, r2
 80031ac:	4b38      	ldr	r3, [pc, #224]	; (8003290 <UART_SetConfig+0x4e4>)
 80031ae:	fba3 2301 	umull	r2, r3, r3, r1
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2264      	movs	r2, #100	; 0x64
 80031b6:	fb02 f303 	mul.w	r3, r2, r3
 80031ba:	1acb      	subs	r3, r1, r3
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	3332      	adds	r3, #50	; 0x32
 80031c0:	4a33      	ldr	r2, [pc, #204]	; (8003290 <UART_SetConfig+0x4e4>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031cc:	441c      	add	r4, r3
 80031ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031d2:	2200      	movs	r2, #0
 80031d4:	673b      	str	r3, [r7, #112]	; 0x70
 80031d6:	677a      	str	r2, [r7, #116]	; 0x74
 80031d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031dc:	4642      	mov	r2, r8
 80031de:	464b      	mov	r3, r9
 80031e0:	1891      	adds	r1, r2, r2
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	415b      	adcs	r3, r3
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ec:	4641      	mov	r1, r8
 80031ee:	1851      	adds	r1, r2, r1
 80031f0:	6039      	str	r1, [r7, #0]
 80031f2:	4649      	mov	r1, r9
 80031f4:	414b      	adcs	r3, r1
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003204:	4659      	mov	r1, fp
 8003206:	00cb      	lsls	r3, r1, #3
 8003208:	4651      	mov	r1, sl
 800320a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800320e:	4651      	mov	r1, sl
 8003210:	00ca      	lsls	r2, r1, #3
 8003212:	4610      	mov	r0, r2
 8003214:	4619      	mov	r1, r3
 8003216:	4603      	mov	r3, r0
 8003218:	4642      	mov	r2, r8
 800321a:	189b      	adds	r3, r3, r2
 800321c:	66bb      	str	r3, [r7, #104]	; 0x68
 800321e:	464b      	mov	r3, r9
 8003220:	460a      	mov	r2, r1
 8003222:	eb42 0303 	adc.w	r3, r2, r3
 8003226:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	663b      	str	r3, [r7, #96]	; 0x60
 8003232:	667a      	str	r2, [r7, #100]	; 0x64
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003240:	4649      	mov	r1, r9
 8003242:	008b      	lsls	r3, r1, #2
 8003244:	4641      	mov	r1, r8
 8003246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800324a:	4641      	mov	r1, r8
 800324c:	008a      	lsls	r2, r1, #2
 800324e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003252:	f7fc ffbf 	bl	80001d4 <__aeabi_uldivmod>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <UART_SetConfig+0x4e4>)
 800325c:	fba3 1302 	umull	r1, r3, r3, r2
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	2164      	movs	r1, #100	; 0x64
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	3332      	adds	r3, #50	; 0x32
 800326e:	4a08      	ldr	r2, [pc, #32]	; (8003290 <UART_SetConfig+0x4e4>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	f003 020f 	and.w	r2, r3, #15
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4422      	add	r2, r4
 8003282:	609a      	str	r2, [r3, #8]
}
 8003284:	bf00      	nop
 8003286:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800328a:	46bd      	mov	sp, r7
 800328c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003290:	51eb851f 	.word	0x51eb851f

08003294 <memset>:
 8003294:	4402      	add	r2, r0
 8003296:	4603      	mov	r3, r0
 8003298:	4293      	cmp	r3, r2
 800329a:	d100      	bne.n	800329e <memset+0xa>
 800329c:	4770      	bx	lr
 800329e:	f803 1b01 	strb.w	r1, [r3], #1
 80032a2:	e7f9      	b.n	8003298 <memset+0x4>

080032a4 <__libc_init_array>:
 80032a4:	b570      	push	{r4, r5, r6, lr}
 80032a6:	4d0d      	ldr	r5, [pc, #52]	; (80032dc <__libc_init_array+0x38>)
 80032a8:	4c0d      	ldr	r4, [pc, #52]	; (80032e0 <__libc_init_array+0x3c>)
 80032aa:	1b64      	subs	r4, r4, r5
 80032ac:	10a4      	asrs	r4, r4, #2
 80032ae:	2600      	movs	r6, #0
 80032b0:	42a6      	cmp	r6, r4
 80032b2:	d109      	bne.n	80032c8 <__libc_init_array+0x24>
 80032b4:	4d0b      	ldr	r5, [pc, #44]	; (80032e4 <__libc_init_array+0x40>)
 80032b6:	4c0c      	ldr	r4, [pc, #48]	; (80032e8 <__libc_init_array+0x44>)
 80032b8:	f000 f818 	bl	80032ec <_init>
 80032bc:	1b64      	subs	r4, r4, r5
 80032be:	10a4      	asrs	r4, r4, #2
 80032c0:	2600      	movs	r6, #0
 80032c2:	42a6      	cmp	r6, r4
 80032c4:	d105      	bne.n	80032d2 <__libc_init_array+0x2e>
 80032c6:	bd70      	pop	{r4, r5, r6, pc}
 80032c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032cc:	4798      	blx	r3
 80032ce:	3601      	adds	r6, #1
 80032d0:	e7ee      	b.n	80032b0 <__libc_init_array+0xc>
 80032d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d6:	4798      	blx	r3
 80032d8:	3601      	adds	r6, #1
 80032da:	e7f2      	b.n	80032c2 <__libc_init_array+0x1e>
 80032dc:	08003324 	.word	0x08003324
 80032e0:	08003324 	.word	0x08003324
 80032e4:	08003324 	.word	0x08003324
 80032e8:	08003328 	.word	0x08003328

080032ec <_init>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	bf00      	nop
 80032f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f2:	bc08      	pop	{r3}
 80032f4:	469e      	mov	lr, r3
 80032f6:	4770      	bx	lr

080032f8 <_fini>:
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fa:	bf00      	nop
 80032fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fe:	bc08      	pop	{r3}
 8003300:	469e      	mov	lr, r3
 8003302:	4770      	bx	lr
